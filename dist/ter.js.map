{"version":3,"file":"ter.js","mappings":"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","sources":["webpack://ter/webpack/universalModuleDefinition","webpack://ter/./src/bodies/Bodies.js","webpack://ter/./src/bodies/Rectangle.js","webpack://ter/./src/core/Common.js","webpack://ter/./src/core/Game.js","webpack://ter/./src/core/GameFunctions.js","webpack://ter/./src/core/Performance.js","webpack://ter/./src/core/Ticker.js","webpack://ter/./src/geometry/Bezier.js","webpack://ter/./src/geometry/Grid.js","webpack://ter/./src/geometry/vec.js","webpack://ter/./src/lib/poly-decomp.js","webpack://ter/./src/lib/simplexNoise.js","webpack://ter/./src/node/Node.js","webpack://ter/./src/node/World.js","webpack://ter/./src/physics/Engine.js","webpack://ter/./src/physics/RigidBody.js","webpack://ter/./src/render/Camera.js","webpack://ter/./src/render/DebugRender.js","webpack://ter/./src/render/PerformanceRender.js","webpack://ter/./src/render/PolygonRender.js","webpack://ter/./src/render/Render.js","webpack://ter/./src/render/RenderMethods.js","webpack://ter/./src/render/RenderTypes.js","webpack://ter/./src/render/Sprite.js","webpack://ter/./src/ter.js","webpack://ter/webpack/bootstrap","webpack://ter/webpack/startup"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"ter\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"ter\"] = factory();\n\telse\n\t\troot[\"ter\"] = factory();\n})(self, () => {\nreturn ","const Bodies = module.exports;\r\nconst { isClass } = require(\"../core/Common.js\");\r\n\r\nBodies.RigidBody = require(\"../physics/RigidBody.js\");\r\nBodies.Rectangle = require(\"../bodies/Rectangle.js\");\r\n\r\nBodies.createBodyFactory = function(Engine) {\r\n\tlet factory = {};\r\n\tfor (let type in Bodies) {\r\n\t\tif (isClass(Bodies[type])) {\r\n\t\t\tfactory[type] = function(...args) {\r\n\t\t\t\treturn new Bodies[type](Engine, ...args);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\treturn factory;\r\n}\r\n","const RigidBody = require(\"../physics/RigidBody.js\");\r\nconst vec = require(\"../geometry/vec.js\");\r\nconst PolygonRender = require(\"../render/PolygonRender.js\");\r\nconst Sprite = require(\"../render/Sprite.js\");\r\n\r\nmodule.exports = class Rectangle extends RigidBody {\r\n\tstatic createVertices(width, height) {\r\n\t\treturn [\r\n\t\t\tnew vec(-width/2,  height/2),\r\n\t\t\tnew vec( width/2,  height/2),\r\n\t\t\tnew vec( width/2, -height/2),\r\n\t\t\tnew vec(-width/2, -height/2),\r\n\t\t];\r\n\t}\r\n\tconstructor(Engine, width, height, position, options = {}) {\r\n\t\tsuper(Engine, Rectangle.createVertices(width, height), position, options);\r\n\r\n\t\tthis.width = width;\r\n\t\tthis.height = height;\r\n\t\tthis.type = \"rectangle\";\r\n\t}\r\n\taddPolygonRender(container, options) {\r\n\t\tlet render = new PolygonRender({\r\n\t\t\tcontainer: container,\r\n\t\t\tposition: new vec(this.position),\r\n\t\t\tvertices: this.vertices,\r\n\t\t\ttype: \"rectangle\",\r\n\t\t\twidth: this.width,\r\n\t\t\theight: this.height,\r\n\t\t\t\r\n\t\t\t...options\r\n\t\t});\r\n\t\tif (this.added) render.add();\r\n\t\tthis.addChild(render);\r\n\t\t\r\n\t\treturn this;\r\n\t}\r\n\taddSprite(container, options) {\r\n\t\tlet render = new Sprite({\r\n\t\t\tcontainer: container,\r\n\t\t\tposition: new vec(this.position),\r\n\t\t\twidth: this.width,\r\n\t\t\theight: this.height,\r\n\t\t\t\r\n\t\t\t...options\r\n\t\t});\r\n\t\tif (this.added) render.add();\r\n\t\tthis.addChild(render);\r\n\r\n\t\treturn this;\r\n\t}\r\n}\r\n","const vec = require(\"../geometry/vec.js\");\r\n\r\nlet Common = module.exports = {\r\n\tclamp: function(x, min, max) { // clamps x so that min <= x <= max\r\n\t\treturn Math.max(min, Math.min(x, max));\r\n\t},\r\n\tangleDiff: function(angle1, angle2) { // returns the signed difference between 2 angles\r\n\t\tfunction mod(a, b) {\r\n\t\t\treturn a - Math.floor(a / b) * b;\r\n\t\t}\r\n\t\treturn mod(angle1 - angle2 + Math.PI, Math.PI * 2) - Math.PI;\r\n\t},\r\n\tmodDiff: function(x, y, m = 1) { // returns the signed difference between 2 values with any modulo, ie 11 oclock is 2 hours from 1 oclock with m = 12\r\n\t\tfunction mod(a, b) {\r\n\t\t\treturn a - Math.floor(a / b) * b;\r\n\t\t}\r\n\t\treturn mod(x - y + m/2, m) - m/2;\r\n\t},\r\n\r\n\t/**\r\n\t * Pairs 2 positive integers, returning a unique number for each possible pairing using elegant pairing - http://szudzik.com/ElegantPairing.pdf\r\n\t * @param {Number} x - 1st number, must be positive integer\r\n\t * @param {Number} y - 2nd number, must be positive integer\r\n\t * @returns {Number} Unique number from those \r\n\t */\r\n\tpair: function(x, y) {\r\n\t\tif (x > y)\r\n\t\t\treturn x*x + x + y;\r\n\t\treturn y*y + x;\r\n\t},\r\n\t/**\r\n\t * Takes a paired number and returns the x/y values that created that number\r\n\t * @param {Number} n Paired number\r\n\t * @returns {vec} Pair of x/y that created that pair\r\n\t */\r\n\tunpair: function(n) {\r\n\t\tlet z = Math.floor(Math.sqrt(n));\r\n\t\tlet l = n - z * z;\r\n\t\treturn l < z ? new vec(l, z) : new vec(z, l - z);\r\n\t},\r\n\r\n\t/**\r\n\t * Pairs 2 positive integers, returning a unique number for each possible pairing using elegant pairing - http://szudzik.com/ElegantPairing.pdf\r\n\t * Returns the same value if x/y are switched\r\n\t * @param {Number} x - 1st number, must be positive integer\r\n\t * @param {Number} y - 2nd number, must be positive integer\r\n\t * @returns {Number} Unique number from those \r\n\t */\r\n\tpairCommon: function(x, y) { // Elegant pairing function, but gives the same result if x/y are switched\r\n\t\tif (x > y)\r\n\t\t\treturn x*x + x + y;\r\n\t\treturn y*y + y + x;\r\n\t},\r\n\r\n\t/**\r\n\t * Calculates the center of mass of a convex body. Uses algorithm from https://bell0bytes.eu/centroid-convex/\r\n\t * @param {Array} vertices - Array of `vec`s to find the center of \r\n\t * @returns \r\n\t */\r\n\tgetCenterOfMass(vertices) {\r\n\t\tlet centroid = new vec(0, 0);\r\n\t\tlet det = 0;\r\n\t\tlet tempDet = 0;\r\n\t\tlet numVertices = vertices.length;\r\n\r\n\t\tfor (let i = 0; i < vertices.length; i++) {\r\n\t\t\tlet curVert = vertices[i];\r\n\t\t\tlet nextVert = vertices[(i + 1) % numVertices];\r\n\r\n\t\t\ttempDet = curVert.x * nextVert.y - nextVert.x * curVert.y;\r\n\t\t\tdet += tempDet;\r\n\r\n\t\t\tcentroid.add2({ x: (curVert.x + nextVert.x) * tempDet, y: (curVert.y + nextVert.y) * tempDet });\r\n\t\t}\r\n\r\n\t\tcentroid.div2(3 * det);\r\n\r\n\t\treturn centroid;\r\n\t},\r\n\r\n\t/**\r\n\t * Parses a color into its base hex code and alpha. Supports hex, hex with alpha, rgb, and rgba\r\n\t * @param {String} originalColor - Color to be parsed\r\n\t * @returns {Array} Array of [hex code, alpha] of parsed color\r\n\t */\r\n\tparseColor: function(originalColor) {\r\n\t\tif (originalColor === \"transparent\") {\r\n\t\t\treturn [\"#000000\", 0];\r\n\t\t}\r\n\t\tlet color;\r\n\t\tlet alpha = 1;\r\n\r\n\t\tif (originalColor[0] === \"#\" && originalColor.length === 9) { // is a hex code with alpha\r\n\t\t\tcolor = originalColor.slice(0, 7);\r\n\t\t\talpha = parseInt(originalColor.slice(7), 16) / 256; // convert to decimel\r\n\t\t}\r\n\t\telse if (originalColor[0] === \"#\" && originalColor.length === 7) { // is a hex code w/0 alpha\r\n\t\t\tcolor = originalColor;\r\n\t\t\talpha = 1;\r\n\t\t}\r\n\t\telse if (originalColor.slice(0, 4) === \"rgb(\") { // rgb\r\n\t\t\tcolor = originalColor.slice(originalColor.indexOf(\"(\") + 1, originalColor.indexOf(\")\")).split(\",\");\r\n\t\t\tcolor = \"#\" + color.map(value => parseInt(value).toString(16).padStart(2, \"0\")).join(\"\");\r\n\t\t\talpha = 1;\r\n\t\t}\r\n\t\telse if (originalColor.slice(0, 5) === \"rgba(\") { // rgba\r\n\t\t\tcolor = originalColor.slice(originalColor.indexOf(\"(\") + 1, originalColor.indexOf(\")\")).split(\",\");\r\n\t\t\talpha = parseInt(color.pop()) / 255;\r\n\t\t\tcolor = \"#\" + color.map(value => parseInt(value).toString(16).padStart(2, \"0\")).join(\"\");\r\n\t\t}\r\n\t\treturn [color, alpha];\r\n\t},\r\n\r\n\t/**\r\n\t * Deep copies `objB` onto `objA` in place.\r\n\t * @param {Object} objA - First object\r\n\t * @param {Object} objB - 2nd object, copied onto `objA`\r\n\t * @param {Number} maxDepth - The maximum depth it can copy\r\n\t * @returns {void}\r\n\t */\r\n\tmerge: function(objA, objB, maxDepth = Infinity, hash = new WeakSet()) {\r\n\t\thash.add(objB);\r\n\r\n\t\tObject.keys(objB).forEach(option => {\r\n\t\t\tlet value = objB[option];\r\n\t\t\t\r\n\t\t\tif (Array.isArray(value)) {\r\n\t\t\t\tobjA[option] = [ ...value ];\r\n\t\t\t}\r\n\t\t\telse if (typeof value === \"object\" && value !== null) {\r\n\t\t\t\tif (maxDepth > 1) {\r\n\t\t\t\t\tif (hash.has(value)) { // Cyclic reference\r\n\t\t\t\t\t\tobjA[option] = value;\r\n\t\t\t\t\t\treturn;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (typeof objA[option] !== \"object\") {\r\n\t\t\t\t\t\tobjA[option] = {};\r\n\t\t\t\t\t}\r\n\t\t\t\t\tCommon.merge(objA[option], value, maxDepth - 1, hash);\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tobjA[option] = value;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tobjA[option] = value;\r\n\t\t\t}\r\n\t\t});\r\n\t},\r\n\t\r\n\t/**\r\n\t * Finds if a variable is a class in disguise\r\n\t * @param {*} obj - Variable to check\r\n\t * @returns {Boolean} If the variable is a class\r\n\t */\r\n\tisClass: function(obj) {\r\n\t\tconst isCtorClass = obj.constructor\r\n\t\t\t&& obj.constructor.toString().substring(0, 5) === 'class'\r\n\t\tif(obj.prototype === undefined) {\r\n\t\t\treturn isCtorClass;\r\n\t\t}\r\n\t\tconst isPrototypeCtorClass = obj.prototype.constructor \r\n\t\t\t&& obj.prototype.constructor.toString\r\n\t\t\t&& obj.prototype.constructor.toString().substring(0, 5) === 'class'\r\n\t\treturn isCtorClass || isPrototypeCtorClass;\r\n\t},\r\n\r\n\t/**\r\n\t * Checks if line `a1`->`a2` is intersecting line `b1`->`b2`, and at what point\r\n\t * @param {vec} a1 - Start of line 1\r\n\t * @param {vec} a2 - End of line 1\r\n\t * @param {vec} b1 - Start of line 2\r\n\t * @param {vec} b2 - End of line 2\r\n\t * @returns {vec} Point of intersection, or null if they don't intersect\r\n\t */\r\n\tlineIntersects: function(a1, a2, b1, b2) { // tells you if lines a1->a2 and b1->b2 are intersecting, and at what point\r\n\t\tif (a1.x === a2.x || a1.y === a2.y) {\r\n\t\t\ta1 = new vec(a1);\r\n\t\t}\r\n\t\tif (b1.x === b2.x || b1.y === b2.y) {\r\n\t\t\tb1 = new vec(b1);\r\n\t\t}\r\n\t\tif (a1.x === a2.x)\r\n\t\t\ta1.x += 0.00001;\r\n\t\tif (b1.x === b2.x)\r\n\t\t\tb1.x += 0.00001;\r\n\t\tif (a1.y === a2.y)\r\n\t\t\ta1.y += 0.00001;\r\n\t\tif (b1.y === b2.y)\r\n\t\t\tb1.y += 0.00001;\r\n\r\n\t\tlet d = (a1.x - a2.x) * (b1.y - b2.y) - (a1.y - a2.y) * (b1.x - b2.x);\r\n\t\tif (d === 0) return false;\r\n\r\n\t\tlet nx = (a1.x * a2.y - a1.y * a2.x) * (b1.x - b2.x) - (a1.x - a2.x) * (b1.x * b2.y - b1.y * b2.x);\r\n\t\tlet ny = (a1.x * a2.y - a1.y * a2.x) * (b1.y - b2.y) - (a1.y - a2.y) * (b1.x * b2.y - b1.y * b2.x);\r\n\r\n\t\tlet pt = new vec(nx / d, ny / d);\r\n\r\n\t\tlet withinX = pt.x > Math.min(a1.x, a2.x) && pt.x < Math.max(a1.x, a2.x) && pt.x > Math.min(b1.x, b2.x) && pt.x < Math.max(b1.x, b2.x);\r\n\t\tlet withinY = pt.y > Math.min(a1.y, a2.y) && pt.y < Math.max(a1.y, a2.y) && pt.y > Math.min(b1.y, b2.y) && pt.y < Math.max(b1.y, b2.y);\r\n\t\tif (withinX && withinY) {\r\n\t\t\treturn pt;\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn null;\r\n\t\t}\r\n\t},\r\n\r\n\t/**\r\n\t * Tests if line `a1`->`a2` is intersecting `body`\r\n\t * @param {vec} a1 - Start of line\r\n\t * @param {vec} a2 - End of line\r\n\t * @param {RigidBody} body - Body to test\r\n\t * @returns {Boolean} If the line is intersecting the body\r\n\t */\r\n\tlineIntersectsBody: function(a1, a2, body) { // tells you if line a1->a2 is intersecting with body, returns true/false\r\n\t\tif (body.children.length > 0) {\r\n\t\t\tfor (let child of body.children) {\r\n\t\t\t\tif (Common.lineIntersectsBody(a1, a2, child)) {\r\n\t\t\t\t\treturn true;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\tlet ray = a2.sub(a1);\r\n\t\tlet rayNormalized = ray.normalize();\r\n\t\tlet rayAxes = [ rayNormalized, rayNormalized.normal() ];\r\n\t\tlet rayVertices = [ a1, a2 ]; \r\n\r\n\t\tfunction SAT(verticesA, verticesB, axes) {\r\n\t\t\tfor (let axis of axes) {\r\n\t\t\t\tlet boundsA = { min: Infinity, max: -Infinity };\r\n\t\t\t\tlet boundsB = { min: Infinity, max: -Infinity };\r\n\t\t\t\tfor (let vertice of verticesA) {\r\n\t\t\t\t\tlet projected = vertice.dot(axis);\r\n\t\t\t\t\tif (projected < boundsA.min) {\r\n\t\t\t\t\t\tboundsA.minVertice\r\n\t\t\t\t\t}\r\n\t\t\t\t\tboundsA.min = Math.min(boundsA.min, projected);\r\n\t\t\t\t\tboundsA.max = Math.max(boundsA.max, projected);\r\n\t\t\t\t}\r\n\t\t\t\tfor (let vertice of verticesB) {\r\n\t\t\t\t\tlet projected = vertice.dot(axis);\r\n\t\t\t\t\tboundsB.min = Math.min(boundsB.min, projected);\r\n\t\t\t\t\tboundsB.max = Math.max(boundsB.max, projected);\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (boundsA.min > boundsB.max || boundsA.max < boundsB.min) { // they are NOT colliding on this axis\r\n\t\t\t\t\treturn false;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\treturn true;\r\n\t\t}\r\n\t\t// SAT using ray axes and body axes\r\n\t\treturn SAT(rayVertices, body.vertices, rayAxes) && SAT(rayVertices, body.vertices, body.axes);\r\n\t},\r\n\r\n\t/**\r\n\t * Finds the static bodies around the ray from `start` to `end`. Useful for getting bodies when calling `Common.raycast` or `Common.raycastSimple`\r\n\t * @param {vec} start - Start of ray\r\n\t * @param {vec} end - End of ray\r\n\t * @param {World} World - World to get bodies from\r\n\t */\r\n\tgetRayNearbyStaticBodies(start, end, World) {\r\n\t\tlet grid = World.staticGrid;\r\n\t\tlet size = grid.gridSize;\r\n\t\tlet bounds = { min: start.min(end).div2(size).floor2(), max: start.max(end).div2(size).floor2() };\r\n\t\tbodies = new Set();\r\n\r\n\t\tfor (let x = bounds.min.x; x <= bounds.max.x; x++) {\r\n\t\t\tfor (let y = bounds.min.y; y <= bounds.max.y; y++) {\r\n\t\t\t\tlet n = grid.pair(new vec(x, y));\r\n\t\t\t\tlet node = grid.grid[n];\r\n\r\n\t\t\t\tif (node) {\r\n\t\t\t\t\tfor (let body of node) {\r\n\t\t\t\t\t\tif (!bodies.has(body)) {\r\n\t\t\t\t\t\t\tbodies.add(body);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t},\r\n\tgetRayNearbyDynamicBodies(start, end, World) {\r\n\t\tlet grid = World.dynamicGrid;\r\n\t\tlet size = grid.gridSize;\r\n\t\tlet bounds = { min: start.min(end).div2(size).floor2(), max: start.max(end).div2(size).floor2() };\r\n\t\tbodies = new Set();\r\n\r\n\t\tfor (let x = bounds.min.x; x <= bounds.max.x; x++) {\r\n\t\t\tfor (let y = bounds.min.y; y <= bounds.max.y; y++) {\r\n\t\t\t\tlet n = grid.pair(new vec(x, y));\r\n\t\t\t\tlet node = grid.grid[n];\r\n\r\n\t\t\t\tif (node) {\r\n\t\t\t\t\tfor (let body of node) {\r\n\t\t\t\t\t\tif (!bodies.has(body)) {\r\n\t\t\t\t\t\t\tbodies.add(body);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t},\r\n\r\n\t/**\r\n\t * \r\n\t * @param {vec} start - Start of ray\r\n\t * @param {vec} end - End of ray\r\n\t * @param {Array} bodies - (Optional) Array of bodies to test\r\n\t * @returns {Object} { collision: Boolean, distance: Number, point: vec, body: RigidBody, verticeIndex: Number }\r\n\t */\r\n\traycast: function(start, end, bodies) {\r\n\t\tlet lineIntersects = Common.lineIntersects;\r\n\t\tlet minDist = Infinity;\r\n\t\tlet minPt = null;\r\n\t\tlet minBody = null;\r\n\t\tlet minVert = -1;\r\n\r\n\t\tfor (let i = 0; i < bodies.length; i++) {\r\n\t\t\tlet body = bodies[i];\r\n\t\t\tlet { vertices } = body;\r\n\t\t\tlet len = vertices.length;\r\n\r\n\t\t\tfor (let i = 0; i < len; i++) {\r\n\t\t\t\tlet cur = vertices[i];\r\n\t\t\t\tlet next = vertices[(i + 1) % len];\r\n\r\n\t\t\t\tlet intersection = lineIntersects(start, end, cur, next);\r\n\t\t\t\tif (intersection) {\r\n\t\t\t\t\tlet dist = intersection.sub(start).length;\r\n\t\t\t\t\tif (dist < minDist) {\r\n\t\t\t\t\t\tminDist = dist;\r\n\t\t\t\t\t\tminPt = intersection;\r\n\t\t\t\t\t\tminBody = body;\r\n\t\t\t\t\t\tminVert = i;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn {\r\n\t\t\tcollision: minPt !== null,\r\n\t\t\tdistance: minDist,\r\n\t\t\tpoint: minPt,\r\n\t\t\tbody: minBody,\r\n\t\t\tverticeIndex: minVert,\r\n\t\t};\r\n\t},\r\n\traycastSimple: function(start, end, bodies) { // raycast that only tells you if there is a collision (usually faster), returns true/false\r\n\t\tlet lineIntersectsBody = Common.lineIntersectsBody;\r\n\r\n\t\tfor (let body of bodies) {\r\n\t\t\tlet intersection = lineIntersectsBody(start, end, body);\r\n\t\t\tif (intersection) {\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn false;\r\n\t},\r\n\tboundCollision: function(boundsA, boundsB) { // checks if 2 bounds { min: vec, max: vec } are intersecting, returns true/false\r\n\t\treturn (boundsA.max.x >= boundsB.min.x && boundsA.min.x <= boundsB.max.x && \r\n\t\t\t\tboundsA.max.y >= boundsB.min.y && boundsA.min.y <= boundsB.max.y);\r\n\t},\r\n\tpointInBounds: function(point, bounds) { // checks if a point { x: x, y: y } is within bounds { min: vec, max: vec }, returns true/false\r\n\t\treturn (point.x >= bounds.min.x && point.x <= bounds.max.x && \r\n\t\t\t\tpoint.y >= bounds.min.y && point.y <= bounds.max.y);\r\n\t},\r\n\r\n\t/**\r\n\t * Deletes first instance of `value` from `array`\r\n\t * @param {Array} array Array item is deleted from\r\n\t * @param {*} value Value deleted from array\r\n\t */\r\n\tarrayDelete(array, value) {\r\n\t\tlet index = array.indexOf(value);\r\n\t\tif (index !== -1) {\r\n\t\t\tarray.splice(index, 1);\r\n\t\t}\r\n\t}\r\n}\r\n","const World = require(\"../node/World.js\");\r\nconst Render = require(\"../render/Render.js\");\r\nconst DebugRender = require(\"../render/DebugRender.js\");\r\nconst Engine = require(\"../physics/Engine.js\");\r\nconst Common = require(\"../core/Common.js\");\r\nconst PerformanceRender = require(\"../render/PerformanceRender.js\");\r\nconst Ticker = require(\"../core/Ticker.js\");\r\nconst Bodies = require(\"../bodies/Bodies.js\");\r\n\r\nmodule.exports = class Game {\r\n\tstatic defaultOptions = {\r\n\t\tWorld: World.defaultOptions,\r\n\t\tRender: Render.defaultOptions,\r\n\t\tEngine: Engine.defaultOptions,\r\n\t\tTicker: Ticker.defaultOptions,\r\n\t}\r\n\r\n\tconstructor(options = {}) {\r\n\t\tlet defaults = { ...Game.defaultOptions };\r\n\t\tCommon.merge(defaults, options, 2);\r\n\t\toptions = defaults;\r\n\r\n\t\tthis.World = new World(options.World);\r\n\t\tthis.Engine = new Engine(this.World, options.Engine);\r\n\t\tthis.Render = new Render(options.Render);\r\n\t\tthis.Ticker = new Ticker(this, options.Ticker);\r\n\t\tthis.Bodies = Bodies.createBodyFactory(this.Engine);\r\n\t}\r\n\tcreateDebugRender() {\r\n\t\tthis.DebugRender = new DebugRender(this);\r\n\r\n\t\tlet Performance = this.Engine.Performance;\r\n\t\tPerformance.render = new PerformanceRender(Performance, this.Render);\r\n\t\tPerformance.render.enabled = true;\r\n\t}\r\n}\r\n","const vec = require(\"../geometry/vec.js\");\r\n\r\nmodule.exports = {\r\n\t// returns an array of index(es) that make up edges of voronoi region. 2 points if it's between 2 vertices, 1 point if it's between axes, 0 points if it's inside body\r\n\tgetVoronoiRegion: function(body, point) { \r\n\t\tlet { vertices } = body;\r\n\t\tlet length = vertices.length;\r\n\t\tfor (let i = 0; i < length; i++) {\r\n\t\t\tlet vertice = vertices[i];\r\n\t\t\tlet nextVertice = vertices[(i + 1) % length];\r\n\t\t\tlet vertToNext = nextVertice.sub(vertice);\r\n\t\t\tlet axis = vertToNext.normalize();\r\n\t\t\tlet normal = axis.normal();\r\n\t\t\tlet vertToPoint = point.sub(vertice);\r\n\r\n\r\n\t\t\tlet outside = vertToPoint.dot(normal) >= -10; // theoretically should be 0, but a bit of penetration is allowed in simulation\r\n\t\t\tlet vpDotAxis = vertToPoint.dot(axis);\r\n\t\t\tlet within = vpDotAxis >= 0 && vpDotAxis <= vertToNext.length;\r\n\r\n\t\t\tif (outside && within) {\r\n\t\t\t\treturn [i, (i + 1) % length];\r\n\t\t\t}\r\n\t\t\telse { // check if between axis and lastAxis\r\n\t\t\t\tlet lastVertice = vertices[(i - 1 + length) % length];\r\n\t\t\t\tlet lastAxis = lastVertice.sub(vertice).normalize();\r\n\t\t\t\tif (vertToPoint.dot(lastAxis) < 0 && vpDotAxis < 0) {\r\n\t\t\t\t\treturn [i];\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn [];\r\n\t},\r\n\tclosestPointBetweenBodies: function(bodyA, bodyB) { // returns the closest point on bodyB from the vertices of bodyA\r\n\t\t// should technically be run 2x for (bodyA, bodyB) and (bodyB, bodyA) to find the actual closest points\r\n\t\tlet verticesA = bodyA.vertices;\r\n\t\tlet verticesB = bodyB.vertices;\r\n\t\tlet point = null;\r\n\t\tlet minDistance = Infinity;\r\n\t\tfor (let i = 0; i < verticesA.length; i++) {\r\n\t\t\tlet verticeA = verticesA[i];\r\n\t\t\tlet region = getVoronoiRegion(bodyB, verticeA);\r\n\r\n\t\t\tif (region.length > 0) {\r\n\t\t\t\tlet projected;\r\n\r\n\t\t\t\tif (region.length === 1) {\r\n\t\t\t\t\tprojected = new vec(verticesB[region[0]]);\r\n\t\t\t\t}\r\n\t\t\t\telse if (region.length === 2) {\r\n\t\t\t\t\tlet pointBA = verticesB[region[0]];\r\n\t\t\t\t\tlet pointBB = verticesB[region[1]];\r\n\t\t\t\t\tlet axis = pointBB.sub(pointBA).normalize();\r\n\t\t\t\t\tprojected = axis.mult(axis.dot(verticeA.sub(pointBA))).add(pointBA);\t\r\n\t\t\t\t}\r\n\r\n\t\t\t\tlet distance = projected.sub(verticeA).length;\r\n\t\t\t\tif (distance < minDistance) {\r\n\t\t\t\t\tminDistance = distance;\r\n\t\t\t\t\tpoint = projected;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn point;\r\n\t},\r\n\tclosestEdgeBetweenBodies: function(bodyA, bodyB) { // returns the closest point and its normal (point and normal are only on bodyB)\r\n\t\tlet verticesA = bodyA.vertices;\r\n\t\tlet verticesB = bodyB.vertices;\r\n\t\tlet point = null;\r\n\t\tlet normal = new vec(1, 0);\r\n\t\tlet minDistance = Infinity;\r\n\t\tfor (let i = 0; i < verticesA.length; i++) {\r\n\t\t\tlet verticeA = verticesA[i];\r\n\t\t\tlet region = getVoronoiRegion(bodyB, verticeA);\r\n\r\n\t\t\tif (region.length > 0) {\r\n\t\t\t\tlet projected;\r\n\t\t\t\tlet curNormal;\r\n\r\n\t\t\t\tif (region.length === 1) {\r\n\t\t\t\t\tprojected = new vec(verticesB[region[0]]);\r\n\t\t\t\t\tlet prev = verticesB[(region[0] - 1 + verticesB.length) % verticesB.length];\r\n\t\t\t\t\tlet next = verticesB[(region[0] + 1) % verticesB.length];\r\n\t\t\t\t\tlet axisA = projected.sub(prev).normalize();\r\n\t\t\t\t\tlet axisB = next.sub(projected).normalize();\r\n\t\t\t\t\tcurNormal = axisA.add(axisB).normalize();\r\n\t\t\t\t}\r\n\t\t\t\telse if (region.length === 2) {\r\n\t\t\t\t\tlet pointBA = verticesB[region[0]];\r\n\t\t\t\t\tlet pointBB = verticesB[region[1]];\r\n\t\t\t\t\tlet axis = pointBB.sub(pointBA).normalize();\r\n\t\t\t\t\tprojected = axis.mult(axis.dot(verticeA.sub(pointBA))).add(pointBA);\r\n\t\t\t\t\tcurNormal = axis;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tlet distance = projected.sub(verticeA).length;\r\n\t\t\t\tif (distance < minDistance) {\r\n\t\t\t\t\tminDistance = distance;\r\n\t\t\t\t\tpoint = projected;\r\n\t\t\t\t\tnormal = curNormal.normal();\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn {\r\n\t\t\tpoint: point,\r\n\t\t\tnormal: normal,\r\n\t\t};\r\n\t},\r\n\r\n\tcreateGradient: function(startPosition, endPosition, colorStops = [[\"#ff0000ff\", 0], [\"#ff000000\", 1]]) {\r\n\t\tlet gradient = ctx.createLinearGradient(startPosition.x, startPosition.y, endPosition.x, endPosition.y);\r\n\t\tfor (let colorStop of colorStops) {\r\n\t\t\tgradient.addColorStop(colorStop[1], colorStop[0]);\r\n\t\t}\r\n\t\treturn gradient;\r\n\t},\r\n\tcreateRadialGradient: function(position, radius, colorStops = [[\"#ff0000ff\", 0], [\"#ff000000\", 1]]) {\r\n\t\tlet gradient = ctx.createRadialGradient(position.x, position.y, 0, position.x, position.y, radius);\r\n\t\tfor (let colorStop of colorStops) {\r\n\t\t\tgradient.addColorStop(colorStop[1], colorStop[0]);\r\n\t\t}\r\n\t\treturn gradient;\r\n\t},\r\n\r\n\tcreateElement: function(type, properties) {\r\n\t\tlet elem = document.createElement(type);\r\n\r\n\t\tfunction addProperties(elem, properties) {\r\n\t\t\tObject.keys(properties).forEach(property => {\r\n\t\t\t\tif (typeof properties[property] === \"object\" && !Array.isArray(property) && !(properties[property] instanceof Element)) {\r\n\t\t\t\t\taddProperties(elem[property], properties[property]);\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tif (property === \"class\") {\r\n\t\t\t\t\t\tlet classes = typeof properties[property] === \"string\" ? properties[property].split(\" \") : properties[property];\r\n\t\t\t\t\t\tfor (let className of classes) {\r\n\t\t\t\t\t\t\telem.classList.add(className);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse if (property === \"parent\") {\r\n\t\t\t\t\t\tproperties[property].appendChild(elem);\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\telem[property] = properties[property];\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t}\r\n\t\taddProperties(elem, properties);\r\n\r\n\t\treturn elem;\r\n\t},\r\n\tgaussianRandom: function(mean = 0, stdev = 1, random = Math.random) { // Standard Normal distribution using Box-Muller transform https://stackoverflow.com/a/36481059\r\n\t\tlet u = 1 - random();\r\n\t\tlet v = random();\r\n\t\tlet z = Math.sqrt(-2.0 * Math.log(u)) * Math.cos(2.0 * Math.PI * v);\r\n\t\treturn z * stdev + mean;\r\n\t},\r\n\tcreateSeededRandom: function(seed) { // Returns function that generates numbers between [0, 1). Adaptation of https://stackoverflow.com/a/19301306\r\n\t\tvar mask = 0xffffffff;\r\n\t\tvar m_w = (123456789 + seed) & mask;\r\n\t\tvar m_z = (987654321 - seed) & mask;\r\n\t\t\r\n\t\treturn function() {\r\n\t\t\tm_z = (36969 * (m_z & 65535) + (m_z >> 16)) & mask;\r\n\t\t\tm_w = (18000 * (m_w & 65535) + (m_w >> 16)) & mask;\r\n\t\t\tvar result = ((m_z << 16) + (m_w & 65535)) >>> 0;\r\n\t\t\tresult /= 4294967296;\r\n\t\t\treturn result;\r\n\t\t}\r\n\t},\r\n\tsetCSSVariable: function(varName, value) {\r\n\t\troot.style.setProperty(`--${varName}`, value);\r\n\t},\r\n\r\n\tboundedRandom: function([min, max]) {\r\n\t\treturn Math.random() * (max - min) + min;\r\n\t},\r\n\tboundedRandomPoint: function(bounds) {\r\n\t\treturn new vec(boundedRandom([bounds.min.x, bounds.max.x]), boundedRandom([bounds.min.y, bounds.max.y]));\r\n\t},\r\n\tgetMovementDirections: function(direction, threshold = 0.5) {\r\n\t\tdirection = direction.normalize();\r\n\r\n\t\tlet directionNames = {};\r\n\t\tif (direction.x > threshold) {\r\n\t\t\tdirectionNames.right = true;\r\n\t\t}\r\n\t\telse if (direction.x < -threshold) {\r\n\t\t\tdirectionNames.left = true;\r\n\t\t}\r\n\t\tif (direction.y > threshold) {\r\n\t\t\tdirectionNames.down = true;\r\n\t\t}\r\n\t\telse if (direction.y < -threshold) {\r\n\t\t\tdirectionNames.up = true;\r\n\t\t}\r\n\t\treturn directionNames;\r\n\t},\r\n\tsetMovementDirections: function(controls, directions) {\r\n\t\tfor (let controlName of Object.keys(directions)) {\r\n\t\t\tcontrols[controlName] = directions[controlName];\r\n\t\t}\r\n\t},\r\n\tcreateTilingArea: function(areaBody, sprite) { // REMOVE and replace with its own render class\r\n\t\tlet texture = PIXI.Texture.from(sprite);\r\n\t\tlet { angle, position } = areaBody;\r\n\t\tareaBody.setAngle(0);\r\n\t\tlet size = areaBody.bounds.max.sub(areaBody.bounds.min);\r\n\t\tlet tiling = new PIXI.TilingSprite(texture, size.x, size.y);\r\n\t\ttiling.zIndex = -1;\r\n\t\tmainWorld.addChild(tiling);\r\n\r\n\t\tlet spritePos = size.mult(-0.5);\r\n\t\tlet curPosition = position.add(spritePos.rotate(angle));\r\n\t\ttiling.rotation = angle;\r\n\t\ttiling.position.set(curPosition.x, curPosition.y);\r\n\t\ttiling.spritePos = spritePos;\r\n\r\n\t\ttiling.delete = function() {\r\n\t\t\tmainWorld.removeChild(tiling);\r\n\t\t\ttiling.destroy();\r\n\t\t}\r\n\r\n\t\tareaBody.setAngle(angle);\r\n\r\n\t\treturn tiling;\r\n\t},\r\n}\r\n","const PerformanceRender = require(\"../render/PerformanceRender\");\r\n\r\nmodule.exports = class Performance {\r\n\tgetAvgs = true;\r\n\tlastUpdate = 0;\r\n\tfps = 60;\r\n\tdelta = 1;\r\n\tframe = 0;\r\n\r\n\thistory = {\r\n\t\tavgFps: 60,\r\n\t\tavgDelta: 1,\r\n\t\tfps: [],\r\n\t\tdelta: [],\r\n\t}\r\n\tengine = {\r\n\t\tdelta: 0,\r\n\t\tlastUpdate: 0,\r\n\t}\r\n\r\n\t/**\r\n\t * Creates a performance tracker\r\n\t * @param {Render} Render - Optional Render object to create a performance render\r\n\t */\r\n\tconstructor(Render = undefined) {\r\n\t\tif (Render) this.render = new PerformanceRender(this, Render);\r\n\t\tthis.lastUpdate = performance.now() / 1000;\r\n\t}\r\n\tupdate() {\r\n\t\tlet curTime = performance.now() / 1000;\r\n\t\tif (curTime - this.lastUpdate === 0) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tthis.delta = Math.min(5, curTime - this.lastUpdate);\r\n\t\tthis.fps = 1 / this.delta;\r\n\t\tthis.lastUpdate = curTime;\r\n\r\n\t\tthis.history.fps.push(this.fps);\r\n\t\tthis.history.delta.push(this.delta);\r\n\r\n\t\tif (this.history.fps.length > 200) {\r\n\t\t\tthis.history.fps.shift();\r\n\t\t\tthis.history.delta.shift();\r\n\t\t}\r\n\t\tlet fps = (() => {\r\n\t\t\tlet v = 0;\r\n\t\t\tfor (let i = 0; i < this.history.fps.length; i++) {\r\n\t\t\t\tv += this.history.fps[i];\r\n\t\t\t}\r\n\t\t\treturn v / this.history.fps.length;\r\n\t\t})();\r\n\t\tlet delta = (() => {\r\n\t\t\tlet v = 0;\r\n\t\t\tfor (let i = 0; i < this.history.delta.length; i++) {\r\n\t\t\t\tv += this.history.delta[i];\r\n\t\t\t}\r\n\t\t\treturn v / this.history.delta.length;\r\n\t\t})();\r\n\r\n\t\tthis.history.avgFps = fps;\r\n\t\tthis.history.avgDelta = delta;\r\n\t}\r\n};\r\n","const Common = require(\"../core/Common.js\");\r\n\r\nmodule.exports = class Ticker {\r\n\tstatic defaultOptions = {\r\n\t\tpauseOnFreeze: true,\r\n\t\tfreezeThreshold: 0.3,\r\n\t}\r\n\r\n\t/**\r\n\t * Creates a ticker that runs on `Game` every frame.\r\n\t * @param {Game} Game Game ticker should be run on\r\n\t * @param {Object} options Options object, see documentation for options\r\n\t */\r\n\tconstructor(Game, options = {}) {\r\n\t\tlet defaults = { ...Ticker.defaultOptions };\r\n\t\tCommon.merge(defaults, options, 1);\r\n\t\toptions = defaults;\r\n\t\t\r\n\t\tthis.Game = Game;\r\n\t\tthis.pauseOnFreeze   = options.pauseOnFreeze;\r\n\t\tthis.freezeThreshold = options.freezeThreshold;\r\n\r\n\t\tthis.tick = this.tick.bind(this);\r\n\t\twindow.addEventListener(\"load\", this.tick);\r\n\t}\r\n\ttick() {\r\n\t\tthis.trigger(\"beforeTick\");\r\n\r\n\t\tconst { Engine } = this.Game;\r\n\t\tconst { Performance } = Engine;\r\n\t\tif (this.pauseOnFreeze && Performance.fps / Math.max(1, Performance.history.avgFps) < this.freezeThreshold) {\r\n\t\t\tPerformance.update();\r\n\t\t}\r\n\t\telse {\r\n\t\t\tEngine.update();\r\n\t\t\t// animations.run();\r\n\t\t}\r\n\r\n\t\tthis.trigger(\"afterTick\");\r\n\t\trequestAnimationFrame(this.tick);\r\n\t}\r\n\t\r\n\t#events = {\r\n\t\tbeforeTick: [],\r\n\t\tafterTick: [],\r\n\t}\r\n\ton(event, callback) {\r\n\t\tif (this.#events[event]) {\r\n\t\t\tthis.#events[event].push(callback);\r\n\t\t}\r\n\t\telse {\r\n\t\t\tconsole.warn(event + \" is not a valid event\");\r\n\t\t}\r\n\t}\r\n\toff(event, callback) {\r\n\t\tevent = this.#events[event];\r\n\t\tif (event.includes(callback)) {\r\n\t\t\tevent.splice(event.indexOf(callback), 1);\r\n\t\t}\r\n\t}\r\n\ttrigger(event) {\r\n\t\t// Trigger each event\r\n\t\tif (this.#events[event]) {\r\n\t\t\tthis.#events[event].forEach(callback => {\r\n\t\t\t\tcallback();\r\n\t\t\t});\r\n\t\t}\r\n\t}\r\n}\r\n","\"use strict\";\r\n\r\nmodule.exports = class Bezier {\r\n\tconstructor(pt1, cp1, cp2, pt2) { // start, control 1, control 2, end\r\n\t\t// https://javascript.info/bezier-curve\r\n\t\t// P = ((1−t)^3 * P1) + (3(1−t)^2 * t * P2) + (3(1−t) * t^2 * P3) + (t^3 * P4)\r\n\t\t// arc length = ∫a^b √[1 + (dy/dx)^2] dx\r\n\t\t// arc length = ∫a^b\r\n\r\n\t\tif (pt1.a && pt1.b) {\r\n\t\t\tthis.a = new vec(pt1.a);\r\n\t\t\tthis.b = new vec(pt1.b);\r\n\t\t\tthis.c = new vec(pt1.c);\r\n\t\t\tthis.d = new vec(pt1.d);\r\n\t\t}\r\n\t\telse {\r\n\t\t\tthis.a = new vec(pt1);\r\n\t\t\tthis.b = new vec(cp1);\r\n\t\t\tthis.c = new vec(cp2);\r\n\t\t\tthis.d = new vec(pt2);\r\n\t\t}\r\n\r\n\t\tthis.length = this.getLength();\r\n\t}\r\n\tgetAtT(t) {\r\n\t\tlet x = (this.a.x * (1 - t)**3) + (3*this.b.x * t * (1 - t)**2) + (3*this.c.x * (1 - t) * t**2) + (this.d.x * t**3);\r\n\t\tlet y = (this.a.y * (1 - t)**3) + (3*this.b.y * t * (1 - t)**2) + (3*this.c.y * (1 - t) * t**2) + (this.d.y * t**3);\r\n\r\n\t\treturn new vec(x, y);\r\n\t}\r\n\tgetLength(dt = 0.01) {\r\n\t\tlet lastPt = this.getAtT(0);\r\n\t\tlet len = 0;\r\n\t\tfor (let t = dt; t <= 1; t += dt) {\r\n\t\t\tlet pt = this.getAtT(t);\r\n\t\t\tlen += pt.sub(lastPt).length;\r\n\t\t\tlastPt = pt;\r\n\t\t}\r\n\t\tlen += this.getAtT(1).sub(lastPt).length;\r\n\r\n\t\treturn len;\r\n\t}\r\n\tget(d) {\r\n\t\treturn this.getAtT(d / this.length);\r\n\t}\r\n\tgetDxAtT(t) { // 1st derivative\r\n\t\tlet x = 3 * ((this.d.x - 3*this.c.x + 3*this.b.x - this.a.x) * t ** 2 + (2*this.c.x - 4*this.b.x + 2*this.a.x) * t + this.b.x - this.a.x);\r\n\t\tlet y = 3 * ((this.d.y - 3*this.c.y + 3*this.b.y - this.a.y) * t ** 2 + (2*this.c.y - 4*this.b.y + 2*this.a.y) * t + this.b.y - this.a.y);\r\n\r\n\t\treturn new vec(x, y);\r\n\t}\r\n\tgetDx(d) {\r\n\t\treturn this.getDxAtT(d / this.length);\r\n\t}\r\n\tgetDx2AtT(t) { // 2nd derivative\r\n\t\tlet x = 6 * ((this.d.x - 3*this.c.x + 3*this.b.x - this.a.x) * t + this.c.x - 2*this.b.x + this.a.x);\r\n\t\tlet y = 6 * ((this.d.y - 3*this.c.y + 3*this.b.y - this.a.y) * t + this.c.y - 2*this.b.y + this.a.y);\r\n\r\n\t\treturn new vec(x, y);\r\n\t}\r\n\tgetDx2(d) {\r\n\t\treturn this.getDx2AtT(d / this.length);\r\n\t}\r\n\r\n\trender() {\r\n\t\tctx.beginPath();\r\n\t\tfor (let t = 0; t < this.length; t += 10) {\r\n\t\t\tlet pt = this.get(t);\r\n\r\n\t\t\tif (t === 0) {\r\n\t\t\t\tctx.moveTo(pt.x, pt.y);\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tctx.lineTo(pt.x, pt.y);\r\n\t\t\t}\r\n\t\t}\r\n\t\tctx.strokeStyle = \"#ff0000\";\r\n\t\tctx.lineWidth = 1 / camera.scale;\r\n\t\tctx.stroke();\r\n\t}\r\n\trenderDx() {\r\n\t\tctx.strokeStyle = \"#000000\";\r\n\t\tctx.lineWidth = 1 / camera.scale;\r\n\r\n\r\n\t\tfor (let t = 10; t < this.length; t += 10) {\r\n\t\t\tlet pt = this.get(t);\r\n\t\t\tlet lastPt = this.get(t - 10);\r\n\r\n\t\t\tctx.lineWidth = this.getDx(t).length ** 2 * 0.0001 / camera.scale;\r\n\r\n\t\t\tctx.beginPath();\r\n\t\t\tctx.moveTo(lastPt.x, lastPt.y);\r\n\t\t\tctx.lineTo(pt.x, pt.y);\r\n\t\t\tctx.stroke();\r\n\r\n\t\t}\r\n\t}\r\n\ttoObject() {\r\n\t\treturn {\r\n\t\t\ta: this.a.toObject(),\r\n\t\t\tb: this.b.toObject(),\r\n\t\t\tc: this.c.toObject(),\r\n\t\t\td: this.d.toObject(),\r\n\t\t};\r\n\t}\r\n}\r\n","\"use strict\";\r\n\r\nconst { arrayDelete } = require(\"../core/Common.js\");\r\n\r\nmodule.exports = class Grid {\r\n\tstatic id = 0;\r\n\tgrid = {};\r\n\tgridIds = new Set();\r\n\tgridSize = 2000;\r\n\tconstructor(size = 2000) {\r\n\t\tthis.gridSize = size;\r\n\t\tthis.id = Grid.id++;\r\n\t}\r\n\tpair = function(pos) {\r\n\t\tlet x = pos.x >= 0 ? pos.x * 2 : pos.x * -2 - 1;\r\n\t\tlet y = pos.y >= 0 ? pos.y * 2 : pos.y * -2 - 1;\r\n\t\treturn (x >= y) ? (x * x + x + y) : (y * y + x);\r\n\t}\r\n\tunpair = function(n) {\r\n\t\tlet sqrtz = Math.floor(Math.sqrt(n));\r\n\t\tlet sqz = sqrtz * sqrtz;\r\n\t\tlet result1 = ((n - sqz) >= sqrtz) ? new vec(sqrtz, n - sqz - sqrtz) : new vec(n - sqz, sqrtz);\r\n\t\tlet x = result1.x % 2 === 0 ? result1.x / 2 : (result1.x + 1) / -2;\r\n\t\tlet y = result1.y % 2 === 0 ? result1.y / 2 : (result1.y + 1) / -2;\r\n\t\treturn new vec(x, y);\r\n\t}\r\n\tgetBounds = function(body) {\r\n\t\tlet size = this.gridSize;\r\n\t\tif (typeof body.bounds === \"object\") {\r\n\t\t\treturn {\r\n\t\t\t\tmin: body.bounds.min.div(size).floor2(),\r\n\t\t\t\tmax: body.bounds.max.div(size).floor2(),\r\n\t\t\t}\r\n\t\t}\r\n\t\telse if (body.x !== undefined && body.y !== undefined) {\r\n\t\t\tlet x = Math.floor(body.x / size);\r\n\t\t\tlet y = Math.floor(body.y / size);\r\n\t\t\treturn {\r\n\t\t\t\tmin: new vec(x, y),\r\n\t\t\t\tmax: new vec(x, y),\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\tgetBucketIds = function(bounds) {\r\n\t\tlet ids = [];\r\n\t\tfor (let x = bounds.min.x; x <= bounds.max.x; x++) {\r\n\t\t\tfor (let y = bounds.min.y; y <= bounds.max.y; y++) {\r\n\t\t\t\tlet n = this.pair(new vec(x, y));\r\n\r\n\t\t\t\tif (this.grid[n]) {\r\n\t\t\t\t\tids.push(n);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn ids;\r\n\t}\r\n\r\n\taddBody = function(body) {\r\n\t\tlet bounds = this.getBounds(body);\r\n\r\n\t\tif (!body._Grids) body._Grids = {};\r\n\t\tif (!body._Grids[this.id]) body._Grids[this.id] = [];\r\n\r\n\t\tfor (let x = bounds.min.x; x <= bounds.max.x; x++) {\r\n\t\t\tfor (let y = bounds.min.y; y <= bounds.max.y; y++) {\r\n\t\t\t\tlet n = this.pair(new vec(x, y));\r\n\r\n\t\t\t\tbody._Grids[this.id].push(n);\r\n\t\t\t\tif (!this.grid[n]) {\r\n\t\t\t\t\tthis.grid[n] = [];\r\n\t\t\t\t\tthis.gridIds.add(n);\r\n\t\t\t\t}\r\n\t\t\t\tthis.grid[n].push(body);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\tremoveBody = function(body) {\r\n\t\tfor (let n of body._Grids[this.id]) {\r\n\t\t\tlet node = this.grid[n];\r\n\t\t\tif (node) {\r\n\t\t\t\tarrayDelete(node, body);\r\n\t\t\t\tif (node.length === 0) {\r\n\t\t\t\t\tdelete this.grid[n];\r\n\t\t\t\t\tthis.gridIds.delete(n);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\taddPoint = function(point) {\r\n\t\tif (!point._Grids) point._Grids = {};\r\n\t\tif (!point._Grids[this.id]) point._Grids[this.id] = [];\r\n\r\n\t\tlet position = point.x ? point : point.position;\r\n\t\tlet bucketPos = position.div(this.gridSize).floor2();\r\n\t\tlet n = this.pair(bucketPos);\r\n\t\tpoint._Grids[this.id].push(n);\r\n\t\tif (!this.grid[n]) {\r\n\t\t\tthis.grid[n] = [];\r\n\t\t\tthis.gridIds.add(n);\r\n\t\t}\r\n\t\tthis.grid[n].push(point);\r\n\t}\r\n\tremovePoint = function(point) {\r\n\t\tif (!point._Grids) console.log(point._Grids);\r\n\t\tfor (let n of point._Grids[this.id]) {\r\n\t\t\tlet node = this.grid[n];\r\n\t\t\tif (node) {\r\n\t\t\t\tarrayDelete(node, point);\r\n\t\t\t\tif (node.length === 0) {\r\n\t\t\t\t\tdelete this.grid[n];\r\n\t\t\t\t\tthis.gridIds.delete(n);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\tupdateBody = function(body) {\r\n\t\tlet curNodes = body._Grids[this.id];\r\n\t\tlet oldNodes = new Set(curNodes);\r\n\t\tlet bounds = this.getBounds(body);\r\n\r\n\t\tfor (let x = bounds.min.x; x <= bounds.max.x; x++) {\r\n\t\t\tfor (let y = bounds.min.y; y <= bounds.max.y; y++) {\r\n\t\t\t\tlet n = this.pair(new vec(x, y));\r\n\r\n\t\t\t\tif (!oldNodes.has(n)) {\r\n\t\t\t\t\tcurNodes.push(n);\r\n\t\t\t\t\tif (!this.grid[n]) {\r\n\t\t\t\t\t\tthis.grid[n] = [];\r\n\t\t\t\t\t\tthis.gridIds.add(n);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tthis.grid[n].push(body);\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\toldNodes.delete(n);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tfor (let n of oldNodes) {\r\n\t\t\tlet node = this.grid[n];\r\n\t\t\tarrayDelete(curNodes, n);\r\n\t\t\tif (!node) continue;\r\n\t\t\tarrayDelete(node, body);\r\n\t\t\tif (node.length === 0) {\r\n\t\t\t\tdelete this.grid[n];\r\n\t\t\t\tthis.gridIds.delete(n);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}\r\n","module.exports = class vec {\r\n\tconstructor(x, y) {\r\n\t\tif (typeof x === \"object\") {\r\n\t\t\tif (Array.isArray(x)) {\r\n\t\t\t\tthis.x = x[0];\r\n\t\t\t\tthis.y = x[1];\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tthis.x = x.x;\r\n\t\t\t\tthis.y = x.y;\r\n\t\t\t}\r\n\t\t}\r\n\t\telse if (typeof x === \"number\" && y === undefined) {\r\n\t\t\tthis.x = Math.cos(x);\r\n\t\t\tthis.y = Math.sin(x);\r\n\t\t}\r\n\t\telse {\r\n\t\t\tthis.x = x;\r\n\t\t\tthis.y = y;\r\n\t\t}\r\n\r\n\t\treturn this;\r\n\t}\r\n\tadd(vec2) {\r\n\t\tif (typeof vec2 === \"number\") {\r\n\t\t\treturn new vec(this.x + vec2, this.y + vec2);\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn new vec(this.x + vec2.x, this.y + vec2.y);\r\n\t\t}\r\n\t}\r\n\tsub(vec2) {\r\n\t\tif (typeof vec2 === \"number\") {\r\n\t\t\treturn new vec(this.x - vec2, this.y - vec2);\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn new vec(this.x - vec2.x, this.y - vec2.y);\r\n\t\t}\r\n\t}\r\n\tmult(vec2) {\r\n\t\tif (typeof vec2 === \"number\") {\r\n\t\t\treturn new vec(this.x * vec2, this.y * vec2);\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn new vec(this.x * vec2.x, this.y * vec2.y);\r\n\t\t}\r\n\t}\r\n\tdiv(vec2) {\r\n\t\tif (typeof vec2 === \"number\") {\r\n\t\t\treturn new vec(this.x / vec2, this.y / vec2);\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn new vec(this.x / vec2.x, this.y / vec2.y);\r\n\t\t}\r\n\t}\r\n\tadd2(vec2) {\r\n\t\tif (typeof vec2 === \"number\") {\r\n\t\t\tthis.x += vec2;\r\n\t\t\tthis.y += vec2;\r\n\t\t\treturn this;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tthis.x += vec2.x;\r\n\t\t\tthis.y += vec2.y;\r\n\t\t\treturn this;\r\n\t\t}\r\n\t}\r\n\tsub2(vec2) {\r\n\t\tif (typeof vec2 === \"number\") {\r\n\t\t\tthis.x -= vec2;\r\n\t\t\tthis.y -= vec2;\r\n\t\t\treturn this;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tthis.x -= vec2.x;\r\n\t\t\tthis.y -= vec2.y;\r\n\t\t\treturn this;\r\n\t\t}\r\n\t}\r\n\tmult2(vec2) {\r\n\t\tif (typeof vec2 === \"number\") {\r\n\t\t\tthis.x *= vec2;\r\n\t\t\tthis.y *= vec2;\r\n\t\t\treturn this;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tthis.x *= vec2.x;\r\n\t\t\tthis.y *= vec2.y;\r\n\t\t\treturn this;\r\n\t\t}\r\n\t}\r\n\tdiv2(vec2) {\r\n\t\tif (typeof vec2 === \"number\") {\r\n\t\t\tthis.x /= vec2;\r\n\t\t\tthis.y /= vec2;\r\n\t\t\treturn this;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tthis.x /= vec2.x;\r\n\t\t\tthis.y /= vec2.y;\r\n\t\t\treturn this;\r\n\t\t}\r\n\t}\r\n\tpow(vec2) {\r\n\t\tif (typeof vec2 === \"number\") {\r\n\t\t\treturn new vec(this.x ** vec2, this.y ** vec2);\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn new vec(this.x ** vec2.x, this.y ** vec2.y);\r\n\t\t}\r\n\t}\r\n\tpow2(vec2) {\r\n\t\tif (typeof vec2 === \"number\") {\r\n\t\t\tthis.x = this.x ** vec2;\r\n\t\t\tthis.y = this.y ** vec2;\r\n\t\t\treturn this;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tthis.x = this.x ** vec2.x;\r\n\t\t\tthis.y = this.y ** vec2.y;\r\n\t\t\treturn this;\r\n\t\t}\r\n\t}\r\n\tsign() {\r\n\t\treturn new vec(Math.sign(this.x), Math.sign(this.y));\r\n\t}\r\n\tsign2() {\r\n\t\tthis.x = Math.sign(this.x);\r\n\t\tthis.y = Math.sign(this.y);\r\n\t\treturn this;\r\n\t}\r\n\tmod(vec2) {\r\n\t\tif (typeof vec2 === \"number\")\r\n\t\t\treturn new vec(this.x % vec2, this.y % vec2);\r\n\t\treturn new vec(this.x % vec2.x, this.y % vec2.y);\r\n\t}\r\n\tmod2(vec2) {\r\n\t\tif (typeof vec2 === \"number\") {\r\n\t\t\tthis.x %= vec2;\r\n\t\t\tthis.y %= vec2;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tthis.x %= vec2.x;\r\n\t\t\tthis.y %= vec2.y;\r\n\t\t}\r\n\t\treturn this;\r\n\t}\r\n\tdot(vec2) {\r\n\t\treturn this.x * vec2.x + this.y * vec2.y;\r\n\t}\r\n\tcross(vec2) {\r\n\t\treturn this.x * vec2.y - this.y * vec2.x;\r\n\t}\r\n\tavg(vec2, weight = 0.5) {\r\n\t\tlet weight2 = 1 - weight;\r\n\t\treturn new vec(this.x * weight + vec2.x * weight2, this.y * weight + vec2.y * weight2);\r\n\t}\r\n\tget length() {\r\n\t\treturn Math.sqrt(this.x * this.x + this.y * this.y);\r\n\t}\r\n\tset length(len) {\r\n\t\tlet scale = len / this.length;\r\n\t\tthis.x *= scale;\r\n\t\tthis.y *= scale;\r\n\r\n\t\treturn this;\r\n\t}\r\n\tget angle() {\r\n\t\treturn Math.atan2(this.y, this.x);\r\n\t}\r\n\tget area() {\r\n\t\treturn this.x * this.y;\r\n\t}\r\n\tmanhattan(vec2) {\r\n\t\treturn Math.abs(vec2.x - this.x) + Math.abs(vec2.y - this.y);\r\n\t}\r\n\tabs() {\r\n\t\treturn new vec(Math.abs(this.x), Math.abs(this.y));\r\n\t}\r\n\tabs2() {\r\n\t\tthis.x = Math.abs(this.x);\r\n\t\tthis.y = Math.abs(this.y);\r\n\t\treturn this;\r\n\t}\r\n\treflect(vec2) { // vec2 must be normalized\r\n\t\t// Vect2 = Vect1 - 2 * WallN * (WallN DOT Vect1)\r\n\t\tlet v2 = vec2.normal();\r\n\t\treturn this.sub(v2.mult(v2.dot(this) * 2));\r\n\t}\r\n\treflect2(vec2) { // vec2 must be normalized\r\n\t\tlet v2 = vec2.normal();\r\n\t\treturn this.sub2(v2.mult(v2.dot(this) * 2));\r\n\t}\r\n\trotate(angle) {\r\n\t\treturn new vec(Math.cos(angle) * this.x - Math.sin(angle) * this.y, Math.sin(angle) * this.x + Math.cos(angle) * this.y);\r\n\t}\r\n\trotate2(angle) {\r\n\t\tlet x = Math.cos(angle) * this.x - Math.sin(angle) * this.y;\r\n\t\tthis.y = Math.sin(angle) * this.x + Math.cos(angle) * this.y;\r\n\t\tthis.x = x;\r\n\t\treturn this;\r\n\t}\r\n\tproject(vec2, bound = false) { // projects this vector onto the other one\r\n\t\tlet d1 = this.dot(vec2);\r\n\t\tlet d2 = vec2.x * vec2.x + vec2.y * vec2.y;\r\n\r\n\t\tif (bound) {\r\n\t\t\td1 = Math.max(0, Math.min(d2, d1));\r\n\t\t}\r\n\r\n\t\treturn new vec(d1 * vec2.x / d2, d1 * vec2.y / d2);\r\n\t}\r\n\tproject2(vec2, bound = false) { // projects this vector onto the other one\r\n\t\tlet d1 = this.dot(vec2);\r\n\t\tlet d2 = vec2.x * vec2.x + vec2.y * vec2.y;\r\n\r\n\t\tif (bound) {\r\n\t\t\td1 = Math.max(0, Math.min(d2, d1));\r\n\t\t}\r\n\r\n\t\tthis.x = d1 * vec2.x / d2;\r\n\t\tthis.y = d1 * vec2.y / d2;\r\n\r\n\t\treturn this;\r\n\t}\r\n\tnormalize() {\r\n\t\tlet len = this.length;\r\n\t\tif (len === 0) return new vec(this);\r\n\t\treturn new vec(this.x / len, this.y / len);\r\n\t}\r\n\tnormalize2() {\r\n\t\tlet len = this.length;\r\n\t\tif (len === 0) return this;\r\n\t\tthis.x /= len;\r\n\t\tthis.y /= len;\r\n\t\treturn this;\r\n\t}\r\n\tnormal() { // left hand normal\r\n\t\treturn new vec(this.y, -this.x);\r\n\t}\r\n\tnormal2() { // left hand normal\r\n\t\tlet y = this.y;\r\n\t\tthis.y = -this.x;\r\n\t\tthis.x = y;\r\n\t\treturn this;\r\n\t}\r\n\tfloor() {\r\n\t\treturn new vec(Math.floor(this.x), Math.floor(this.y));\r\n\t}\r\n\tfloor2() {\r\n\t\tthis.x = Math.floor(this.x);\r\n\t\tthis.y = Math.floor(this.y);\r\n\t\treturn this;\r\n\t}\r\n\tceil() {\r\n\t\treturn new vec(Math.ceil(this.x), Math.ceil(this.y));\r\n\t}\r\n\tceil2() {\r\n\t\tthis.x = Math.ceil(this.x);\r\n\t\tthis.y = Math.ceil(this.y);\r\n\t\treturn this;\r\n\t}\r\n\tround() {\r\n\t\treturn new vec(Math.round(this.x), Math.round(this.y));\r\n\t}\r\n\tround2() {\r\n\t\tthis.x = Math.round(this.x);\r\n\t\tthis.y = Math.round(this.y);\r\n\t\treturn this;\r\n\t}\r\n\tmin(vec2) {\r\n\t\treturn new vec(Math.min(vec2.x, this.x), Math.min(vec2.y, this.y));\r\n\t}\r\n\tmin2(vec2) {\r\n\t\tthis.x = Math.min(this.x, vec2.x);\r\n\t\tthis.y = Math.min(this.y, vec2.y);\r\n\t\treturn this;\r\n\t}\r\n\tmax(vec2) {\r\n\t\treturn new vec(Math.max(vec2.x, this.x), Math.max(vec2.y, this.y));\r\n\t}\r\n\tmax2(vec2) {\r\n\t\tthis.x = Math.max(this.x, vec2.x);\r\n\t\tthis.y = Math.max(this.y, vec2.y);\r\n\t\treturn this;\r\n\t}\r\n\tclamp(min, max) {\r\n\t\treturn new vec(Math.max(min.x, Math.min(max.x, this.x)), Math.max(min.y, Math.min(max.y, this.y)));\r\n\t}\r\n\tclamp2(min, max) {\r\n\t\tthis.x = Math.max(min.x, Math.min(max.x, this.x));\r\n\t\tthis.y = Math.max(min.y, Math.min(max.y, this.y));\r\n\t\treturn this;\r\n\t}\r\n\tequals(vec2) {\r\n\t\treturn this.x === vec2.x && this.y === vec2.y;\r\n\t}\r\n\tset(vec2) {\r\n\t\tthis.x = vec2.x;\r\n\t\tthis.y = vec2.y;\r\n\t\treturn this;\r\n\t}\r\n\ttoString() {\r\n\t\treturn `{ x: ${ this.x }, y: ${ this.y } }`;\r\n\t}\r\n\ttoStringInt() {\r\n\t\treturn `{ x: ${ Math.round(this.x) }, y: ${ Math.round(this.y) } }`;\r\n\t}\r\n\ttoObject() {\r\n\t\treturn { x: this.x, y: this.y };\r\n\t}\r\n\ttoArray() {\r\n\t\treturn [this.x, this.y];\r\n\t}\r\n\tisNaN() {\r\n\t\treturn isNaN(this.x) || isNaN(this.y);\r\n\t}\r\n}\r\n","/*\r\nThe MIT License (MIT)\r\n\r\nCopyright (c) 2013 Stefan Hedman\r\n\r\nPermission is hereby granted, free of charge, to any person obtaining a copy of\r\nthis software and associated documentation files (the \"Software\"), to deal in\r\nthe Software without restriction, including without limitation the rights to\r\nuse, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of\r\nthe Software, and to permit persons to whom the Software is furnished to do so,\r\nsubject to the following conditions:\r\n\r\nThe above copyright notice and this permission notice shall be included in all\r\ncopies or substantial portions of the Software.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS\r\nFOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR\r\nCOPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER\r\nIN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\r\nCONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\r\n*/\r\n\r\nmodule.exports = {\r\n    decomp: polygonDecomp,\r\n    quickDecomp: polygonQuickDecomp,\r\n    isSimple: polygonIsSimple,\r\n    removeCollinearPoints: polygonRemoveCollinearPoints,\r\n    removeDuplicatePoints: polygonRemoveDuplicatePoints,\r\n    makeCCW: polygonMakeCCW\r\n};\r\n\r\n/**\r\n * Compute the intersection between two lines.\r\n * @static\r\n * @method lineInt\r\n * @param  {Array}  l1          Line vector 1\r\n * @param  {Array}  l2          Line vector 2\r\n * @param  {Number} precision   Precision to use when checking if the lines are parallel\r\n * @return {Array}              The intersection point.\r\n */\r\nfunction lineInt(l1,l2,precision){\r\n    precision = precision || 0;\r\n    var i = [0,0]; // point\r\n    var a1, b1, c1, a2, b2, c2, det; // scalars\r\n    a1 = l1[1][1] - l1[0][1];\r\n    b1 = l1[0][0] - l1[1][0];\r\n    c1 = a1 * l1[0][0] + b1 * l1[0][1];\r\n    a2 = l2[1][1] - l2[0][1];\r\n    b2 = l2[0][0] - l2[1][0];\r\n    c2 = a2 * l2[0][0] + b2 * l2[0][1];\r\n    det = a1 * b2 - a2*b1;\r\n    if (!scalar_eq(det, 0, precision)) { // lines are not parallel\r\n        i[0] = (b2 * c1 - b1 * c2) / det;\r\n        i[1] = (a1 * c2 - a2 * c1) / det;\r\n    }\r\n    return i;\r\n}\r\n\r\n/**\r\n * Checks if two line segments intersects.\r\n * @method segmentsIntersect\r\n * @param {Array} p1 The start vertex of the first line segment.\r\n * @param {Array} p2 The end vertex of the first line segment.\r\n * @param {Array} q1 The start vertex of the second line segment.\r\n * @param {Array} q2 The end vertex of the second line segment.\r\n * @return {Boolean} True if the two line segments intersect\r\n */\r\nfunction lineSegmentsIntersect(p1, p2, q1, q2){\r\n\tvar dx = p2[0] - p1[0];\r\n\tvar dy = p2[1] - p1[1];\r\n\tvar da = q2[0] - q1[0];\r\n\tvar db = q2[1] - q1[1];\r\n\r\n\t// segments are parallel\r\n\tif((da*dy - db*dx) === 0){\r\n\t\treturn false;\r\n\t}\r\n\r\n\tvar s = (dx * (q1[1] - p1[1]) + dy * (p1[0] - q1[0])) / (da * dy - db * dx);\r\n\tvar t = (da * (p1[1] - q1[1]) + db * (q1[0] - p1[0])) / (db * dx - da * dy);\r\n\r\n\treturn (s>=0 && s<=1 && t>=0 && t<=1);\r\n}\r\n\r\n/**\r\n * Get the area of a triangle spanned by the three given points. Note that the area will be negative if the points are not given in counter-clockwise order.\r\n * @static\r\n * @method area\r\n * @param  {Array} a\r\n * @param  {Array} b\r\n * @param  {Array} c\r\n * @return {Number}\r\n */\r\nfunction triangleArea(a,b,c){\r\n    return (((b[0] - a[0])*(c[1] - a[1]))-((c[0] - a[0])*(b[1] - a[1])));\r\n}\r\n\r\nfunction isLeft(a,b,c){\r\n    return triangleArea(a,b,c) > 0;\r\n}\r\n\r\nfunction isLeftOn(a,b,c) {\r\n    return triangleArea(a, b, c) >= 0;\r\n}\r\n\r\nfunction isRight(a,b,c) {\r\n    return triangleArea(a, b, c) < 0;\r\n}\r\n\r\nfunction isRightOn(a,b,c) {\r\n    return triangleArea(a, b, c) <= 0;\r\n}\r\n\r\nvar tmpPoint1 = [],\r\n    tmpPoint2 = [];\r\n\r\n/**\r\n * Check if three points are collinear\r\n * @method collinear\r\n * @param  {Array} a\r\n * @param  {Array} b\r\n * @param  {Array} c\r\n * @param  {Number} [thresholdAngle=0] Threshold angle to use when comparing the vectors. The function will return true if the angle between the resulting vectors is less than this value. Use zero for max precision.\r\n * @return {Boolean}\r\n */\r\nfunction collinear(a,b,c,thresholdAngle) {\r\n    if(!thresholdAngle){\r\n        return triangleArea(a, b, c) === 0;\r\n    } else {\r\n        var ab = tmpPoint1,\r\n            bc = tmpPoint2;\r\n\r\n        ab[0] = b[0]-a[0];\r\n        ab[1] = b[1]-a[1];\r\n        bc[0] = c[0]-b[0];\r\n        bc[1] = c[1]-b[1];\r\n\r\n        var dot = ab[0]*bc[0] + ab[1]*bc[1],\r\n            magA = Math.sqrt(ab[0]*ab[0] + ab[1]*ab[1]),\r\n            magB = Math.sqrt(bc[0]*bc[0] + bc[1]*bc[1]),\r\n            angle = Math.acos(dot/(magA*magB));\r\n        return angle < thresholdAngle;\r\n    }\r\n}\r\n\r\nfunction sqdist(a,b){\r\n    var dx = b[0] - a[0];\r\n    var dy = b[1] - a[1];\r\n    return dx * dx + dy * dy;\r\n}\r\n\r\n/**\r\n * Get a vertex at position i. It does not matter if i is out of bounds, this function will just cycle.\r\n * @method at\r\n * @param  {Number} i\r\n * @return {Array}\r\n */\r\nfunction polygonAt(polygon, i){\r\n    var s = polygon.length;\r\n    return polygon[i < 0 ? i % s + s : i % s];\r\n}\r\n\r\n/**\r\n * Clear the polygon data\r\n * @method clear\r\n * @return {Array}\r\n */\r\nfunction polygonClear(polygon){\r\n    polygon.length = 0;\r\n}\r\n\r\n/**\r\n * Append points \"from\" to \"to\"-1 from an other polygon \"poly\" onto this one.\r\n * @method append\r\n * @param {Polygon} poly The polygon to get points from.\r\n * @param {Number}  from The vertex index in \"poly\".\r\n * @param {Number}  to The end vertex index in \"poly\". Note that this vertex is NOT included when appending.\r\n * @return {Array}\r\n */\r\nfunction polygonAppend(polygon, poly, from, to){\r\n    for(var i=from; i<to; i++){\r\n        polygon.push(poly[i]);\r\n    }\r\n}\r\n\r\n/**\r\n * Make sure that the polygon vertices are ordered counter-clockwise.\r\n * @method makeCCW\r\n */\r\nfunction polygonMakeCCW(polygon){\r\n    var br = 0,\r\n        v = polygon;\r\n\r\n    // find bottom right point\r\n    for (var i = 1; i < polygon.length; ++i) {\r\n        if (v[i][1] < v[br][1] || (v[i][1] === v[br][1] && v[i][0] > v[br][0])) {\r\n            br = i;\r\n        }\r\n    }\r\n\r\n    // reverse poly if clockwise\r\n    if (!isLeft(polygonAt(polygon, br - 1), polygonAt(polygon, br), polygonAt(polygon, br + 1))) {\r\n        polygonReverse(polygon);\r\n        return true;\r\n    } else {\r\n        return false;\r\n    }\r\n}\r\n\r\n/**\r\n * Reverse the vertices in the polygon\r\n * @method reverse\r\n */\r\nfunction polygonReverse(polygon){\r\n    var tmp = [];\r\n    var N = polygon.length;\r\n    for(var i=0; i!==N; i++){\r\n        tmp.push(polygon.pop());\r\n    }\r\n    for(var i=0; i!==N; i++){\r\n\t\tpolygon[i] = tmp[i];\r\n    }\r\n}\r\n\r\n/**\r\n * Check if a point in the polygon is a reflex point\r\n * @method isReflex\r\n * @param  {Number}  i\r\n * @return {Boolean}\r\n */\r\nfunction polygonIsReflex(polygon, i){\r\n    return isRight(polygonAt(polygon, i - 1), polygonAt(polygon, i), polygonAt(polygon, i + 1));\r\n}\r\n\r\nvar tmpLine1=[],\r\n    tmpLine2=[];\r\n\r\n/**\r\n * Check if two vertices in the polygon can see each other\r\n * @method canSee\r\n * @param  {Number} a Vertex index 1\r\n * @param  {Number} b Vertex index 2\r\n * @return {Boolean}\r\n */\r\nfunction polygonCanSee(polygon, a,b) {\r\n    var p, dist, l1=tmpLine1, l2=tmpLine2;\r\n\r\n    if (isLeftOn(polygonAt(polygon, a + 1), polygonAt(polygon, a), polygonAt(polygon, b)) && isRightOn(polygonAt(polygon, a - 1), polygonAt(polygon, a), polygonAt(polygon, b))) {\r\n        return false;\r\n    }\r\n    dist = sqdist(polygonAt(polygon, a), polygonAt(polygon, b));\r\n    for (var i = 0; i !== polygon.length; ++i) { // for each edge\r\n        if ((i + 1) % polygon.length === a || i === a){ // ignore incident edges\r\n            continue;\r\n        }\r\n        if (isLeftOn(polygonAt(polygon, a), polygonAt(polygon, b), polygonAt(polygon, i + 1)) && isRightOn(polygonAt(polygon, a), polygonAt(polygon, b), polygonAt(polygon, i))) { // if diag intersects an edge\r\n            l1[0] = polygonAt(polygon, a);\r\n            l1[1] = polygonAt(polygon, b);\r\n            l2[0] = polygonAt(polygon, i);\r\n            l2[1] = polygonAt(polygon, i + 1);\r\n            p = lineInt(l1,l2);\r\n            if (sqdist(polygonAt(polygon, a), p) < dist) { // if edge is blocking visibility to b\r\n                return false;\r\n            }\r\n        }\r\n    }\r\n\r\n    return true;\r\n}\r\n\r\n/**\r\n * Check if two vertices in the polygon can see each other\r\n * @method canSee2\r\n * @param  {Number} a Vertex index 1\r\n * @param  {Number} b Vertex index 2\r\n * @return {Boolean}\r\n */\r\nfunction polygonCanSee2(polygon, a,b) {\r\n    // for each edge\r\n    for (var i = 0; i !== polygon.length; ++i) {\r\n        // ignore incident edges\r\n        if (i === a || i === b || (i + 1) % polygon.length === a || (i + 1) % polygon.length === b){\r\n            continue;\r\n        }\r\n        if( lineSegmentsIntersect(polygonAt(polygon, a), polygonAt(polygon, b), polygonAt(polygon, i), polygonAt(polygon, i+1)) ){\r\n            return false;\r\n        }\r\n    }\r\n    return true;\r\n}\r\n\r\n/**\r\n * Copy the polygon from vertex i to vertex j.\r\n * @method copy\r\n * @param  {Number} i\r\n * @param  {Number} j\r\n * @param  {Polygon} [targetPoly]   Optional target polygon to save in.\r\n * @return {Polygon}                The resulting copy.\r\n */\r\nfunction polygonCopy(polygon, i,j,targetPoly){\r\n    var p = targetPoly || [];\r\n    polygonClear(p);\r\n    if (i < j) {\r\n        // Insert all vertices from i to j\r\n        for(var k=i; k<=j; k++){\r\n            p.push(polygon[k]);\r\n        }\r\n\r\n    } else {\r\n\r\n        // Insert vertices 0 to j\r\n        for(var k=0; k<=j; k++){\r\n            p.push(polygon[k]);\r\n        }\r\n\r\n        // Insert vertices i to end\r\n        for(var k=i; k<polygon.length; k++){\r\n            p.push(polygon[k]);\r\n        }\r\n    }\r\n\r\n    return p;\r\n}\r\n\r\n/**\r\n * Decomposes the polygon into convex pieces. Returns a list of edges [[p1,p2],[p2,p3],...] that cuts the polygon.\r\n * Note that this algorithm has complexity O(N^4) and will be very slow for polygons with many vertices.\r\n * @method getCutEdges\r\n * @return {Array}\r\n */\r\nfunction polygonGetCutEdges(polygon) {\r\n    var min=[], tmp1=[], tmp2=[], tmpPoly = [];\r\n    var nDiags = Number.MAX_VALUE;\r\n\r\n    for (var i = 0; i < polygon.length; ++i) {\r\n        if (polygonIsReflex(polygon, i)) {\r\n            for (var j = 0; j < polygon.length; ++j) {\r\n                if (polygonCanSee(polygon, i, j)) {\r\n                    tmp1 = polygonGetCutEdges(polygonCopy(polygon, i, j, tmpPoly));\r\n                    tmp2 = polygonGetCutEdges(polygonCopy(polygon, j, i, tmpPoly));\r\n\r\n                    for(var k=0; k<tmp2.length; k++){\r\n                        tmp1.push(tmp2[k]);\r\n                    }\r\n\r\n                    if (tmp1.length < nDiags) {\r\n                        min = tmp1;\r\n                        nDiags = tmp1.length;\r\n                        min.push([polygonAt(polygon, i), polygonAt(polygon, j)]);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    return min;\r\n}\r\n\r\n/**\r\n * Decomposes the polygon into one or more convex sub-Polygons.\r\n * @method decomp\r\n * @return {Array} An array or Polygon objects.\r\n */\r\nfunction polygonDecomp(polygon){\r\n    var edges = polygonGetCutEdges(polygon);\r\n    if(edges.length > 0){\r\n        return polygonSlice(polygon, edges);\r\n    } else {\r\n        return [polygon];\r\n    }\r\n}\r\n\r\n/**\r\n * Slices the polygon given one or more cut edges. If given one, this function will return two polygons (false on failure). If many, an array of polygons.\r\n * @method slice\r\n * @param {Array} cutEdges A list of edges, as returned by .getCutEdges()\r\n * @return {Array}\r\n */\r\nfunction polygonSlice(polygon, cutEdges){\r\n    if(cutEdges.length === 0){\r\n\t\treturn [polygon];\r\n    }\r\n    if(cutEdges instanceof Array && cutEdges.length && cutEdges[0] instanceof Array && cutEdges[0].length===2 && cutEdges[0][0] instanceof Array){\r\n\r\n        var polys = [polygon];\r\n\r\n        for(var i=0; i<cutEdges.length; i++){\r\n            var cutEdge = cutEdges[i];\r\n            // Cut all polys\r\n            for(var j=0; j<polys.length; j++){\r\n                var poly = polys[j];\r\n                var result = polygonSlice(poly, cutEdge);\r\n                if(result){\r\n                    // Found poly! Cut and quit\r\n                    polys.splice(j,1);\r\n                    polys.push(result[0],result[1]);\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n\r\n        return polys;\r\n    } else {\r\n\r\n        // Was given one edge\r\n        var cutEdge = cutEdges;\r\n        var i = polygon.indexOf(cutEdge[0]);\r\n        var j = polygon.indexOf(cutEdge[1]);\r\n\r\n        if(i !== -1 && j !== -1){\r\n            return [polygonCopy(polygon, i,j),\r\n                    polygonCopy(polygon, j,i)];\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * Checks that the line segments of this polygon do not intersect each other.\r\n * @method isSimple\r\n * @param  {Array} path An array of vertices e.g. [[0,0],[0,1],...]\r\n * @return {Boolean}\r\n * @todo Should it check all segments with all others?\r\n */\r\nfunction polygonIsSimple(polygon){\r\n    var path = polygon, i;\r\n    // Check\r\n    for(i=0; i<path.length-1; i++){\r\n        for(var j=0; j<i-1; j++){\r\n            if(lineSegmentsIntersect(path[i], path[i+1], path[j], path[j+1] )){\r\n                return false;\r\n            }\r\n        }\r\n    }\r\n\r\n    // Check the segment between the last and the first point to all others\r\n    for(i=1; i<path.length-2; i++){\r\n        if(lineSegmentsIntersect(path[0], path[path.length-1], path[i], path[i+1] )){\r\n            return false;\r\n        }\r\n    }\r\n\r\n    return true;\r\n}\r\n\r\nfunction getIntersectionPoint(p1, p2, q1, q2, delta){\r\n\tdelta = delta || 0;\r\n\tvar a1 = p2[1] - p1[1];\r\n\tvar b1 = p1[0] - p2[0];\r\n\tvar c1 = (a1 * p1[0]) + (b1 * p1[1]);\r\n\tvar a2 = q2[1] - q1[1];\r\n\tvar b2 = q1[0] - q2[0];\r\n\tvar c2 = (a2 * q1[0]) + (b2 * q1[1]);\r\n\tvar det = (a1 * b2) - (a2 * b1);\r\n\r\n\tif(!scalar_eq(det,0,delta)){\r\n\t\treturn [((b2 * c1) - (b1 * c2)) / det, ((a1 * c2) - (a2 * c1)) / det];\r\n\t} else {\r\n\t\treturn [0,0];\r\n    }\r\n}\r\n\r\n/**\r\n * Quickly decompose the Polygon into convex sub-polygons.\r\n * @method quickDecomp\r\n * @param  {Array} result\r\n * @param  {Array} [reflexVertices]\r\n * @param  {Array} [steinerPoints]\r\n * @param  {Number} [delta]\r\n * @param  {Number} [maxlevel]\r\n * @param  {Number} [level]\r\n * @return {Array}\r\n */\r\nfunction polygonQuickDecomp(polygon, result,reflexVertices,steinerPoints,delta,maxlevel,level){\r\n    maxlevel = maxlevel || 100;\r\n    level = level || 0;\r\n    delta = delta || 25;\r\n    result = typeof(result)!==\"undefined\" ? result : [];\r\n    reflexVertices = reflexVertices || [];\r\n    steinerPoints = steinerPoints || [];\r\n\r\n    var upperInt=[0,0], lowerInt=[0,0], p=[0,0]; // Points\r\n    var upperDist=0, lowerDist=0, d=0, closestDist=0; // scalars\r\n    var upperIndex=0, lowerIndex=0, closestIndex=0; // Integers\r\n    var lowerPoly=[], upperPoly=[]; // polygons\r\n    var poly = polygon,\r\n        v = polygon;\r\n\r\n    if(v.length < 3){\r\n\t\treturn result;\r\n    }\r\n\r\n    level++;\r\n    if(level > maxlevel){\r\n        console.warn(\"quickDecomp: max level (\"+maxlevel+\") reached.\");\r\n        return result;\r\n    }\r\n\r\n    for (var i = 0; i < polygon.length; ++i) {\r\n        if (polygonIsReflex(poly, i)) {\r\n            reflexVertices.push(poly[i]);\r\n            upperDist = lowerDist = Number.MAX_VALUE;\r\n\r\n\r\n            for (var j = 0; j < polygon.length; ++j) {\r\n                if (isLeft(polygonAt(poly, i - 1), polygonAt(poly, i), polygonAt(poly, j)) && isRightOn(polygonAt(poly, i - 1), polygonAt(poly, i), polygonAt(poly, j - 1))) { // if line intersects with an edge\r\n                    p = getIntersectionPoint(polygonAt(poly, i - 1), polygonAt(poly, i), polygonAt(poly, j), polygonAt(poly, j - 1)); // find the point of intersection\r\n                    if (isRight(polygonAt(poly, i + 1), polygonAt(poly, i), p)) { // make sure it's inside the poly\r\n                        d = sqdist(poly[i], p);\r\n                        if (d < lowerDist) { // keep only the closest intersection\r\n                            lowerDist = d;\r\n                            lowerInt = p;\r\n                            lowerIndex = j;\r\n                        }\r\n                    }\r\n                }\r\n                if (isLeft(polygonAt(poly, i + 1), polygonAt(poly, i), polygonAt(poly, j + 1)) && isRightOn(polygonAt(poly, i + 1), polygonAt(poly, i), polygonAt(poly, j))) {\r\n                    p = getIntersectionPoint(polygonAt(poly, i + 1), polygonAt(poly, i), polygonAt(poly, j), polygonAt(poly, j + 1));\r\n                    if (isLeft(polygonAt(poly, i - 1), polygonAt(poly, i), p)) {\r\n                        d = sqdist(poly[i], p);\r\n                        if (d < upperDist) {\r\n                            upperDist = d;\r\n                            upperInt = p;\r\n                            upperIndex = j;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n\r\n            // if there are no vertices to connect to, choose a point in the middle\r\n            if (lowerIndex === (upperIndex + 1) % polygon.length) {\r\n                //console.log(\"Case 1: Vertex(\"+i+\"), lowerIndex(\"+lowerIndex+\"), upperIndex(\"+upperIndex+\"), poly.size(\"+polygon.length+\")\");\r\n                p[0] = (lowerInt[0] + upperInt[0]) / 2;\r\n                p[1] = (lowerInt[1] + upperInt[1]) / 2;\r\n                steinerPoints.push(p);\r\n\r\n                if (i < upperIndex) {\r\n                    //lowerPoly.insert(lowerPoly.end(), poly.begin() + i, poly.begin() + upperIndex + 1);\r\n                    polygonAppend(lowerPoly, poly, i, upperIndex+1);\r\n                    lowerPoly.push(p);\r\n                    upperPoly.push(p);\r\n                    if (lowerIndex !== 0){\r\n                        //upperPoly.insert(upperPoly.end(), poly.begin() + lowerIndex, poly.end());\r\n                        polygonAppend(upperPoly, poly,lowerIndex,poly.length);\r\n                    }\r\n                    //upperPoly.insert(upperPoly.end(), poly.begin(), poly.begin() + i + 1);\r\n                    polygonAppend(upperPoly, poly,0,i+1);\r\n                } else {\r\n                    if (i !== 0){\r\n                        //lowerPoly.insert(lowerPoly.end(), poly.begin() + i, poly.end());\r\n                        polygonAppend(lowerPoly, poly,i,poly.length);\r\n                    }\r\n                    //lowerPoly.insert(lowerPoly.end(), poly.begin(), poly.begin() + upperIndex + 1);\r\n                    polygonAppend(lowerPoly, poly,0,upperIndex+1);\r\n                    lowerPoly.push(p);\r\n                    upperPoly.push(p);\r\n                    //upperPoly.insert(upperPoly.end(), poly.begin() + lowerIndex, poly.begin() + i + 1);\r\n                    polygonAppend(upperPoly, poly,lowerIndex,i+1);\r\n                }\r\n            } else {\r\n                // connect to the closest point within the triangle\r\n                //console.log(\"Case 2: Vertex(\"+i+\"), closestIndex(\"+closestIndex+\"), poly.size(\"+polygon.length+\")\\n\");\r\n\r\n                if (lowerIndex > upperIndex) {\r\n                    upperIndex += polygon.length;\r\n                }\r\n                closestDist = Number.MAX_VALUE;\r\n\r\n                if(upperIndex < lowerIndex){\r\n                    return result;\r\n                }\r\n\r\n                for (var j = lowerIndex; j <= upperIndex; ++j) {\r\n                    if (\r\n                        isLeftOn(polygonAt(poly, i - 1), polygonAt(poly, i), polygonAt(poly, j)) &&\r\n                        isRightOn(polygonAt(poly, i + 1), polygonAt(poly, i), polygonAt(poly, j))\r\n                    ) {\r\n                        d = sqdist(polygonAt(poly, i), polygonAt(poly, j));\r\n                        if (d < closestDist && polygonCanSee2(poly, i, j)) {\r\n                            closestDist = d;\r\n                            closestIndex = j % polygon.length;\r\n                        }\r\n                    }\r\n                }\r\n\r\n                if (i < closestIndex) {\r\n                    polygonAppend(lowerPoly, poly,i,closestIndex+1);\r\n                    if (closestIndex !== 0){\r\n                        polygonAppend(upperPoly, poly,closestIndex,v.length);\r\n                    }\r\n                    polygonAppend(upperPoly, poly,0,i+1);\r\n                } else {\r\n                    if (i !== 0){\r\n                        polygonAppend(lowerPoly, poly,i,v.length);\r\n                    }\r\n                    polygonAppend(lowerPoly, poly,0,closestIndex+1);\r\n                    polygonAppend(upperPoly, poly,closestIndex,i+1);\r\n                }\r\n            }\r\n\r\n            // solve smallest poly first\r\n            if (lowerPoly.length < upperPoly.length) {\r\n                polygonQuickDecomp(lowerPoly,result,reflexVertices,steinerPoints,delta,maxlevel,level);\r\n                polygonQuickDecomp(upperPoly,result,reflexVertices,steinerPoints,delta,maxlevel,level);\r\n            } else {\r\n                polygonQuickDecomp(upperPoly,result,reflexVertices,steinerPoints,delta,maxlevel,level);\r\n                polygonQuickDecomp(lowerPoly,result,reflexVertices,steinerPoints,delta,maxlevel,level);\r\n            }\r\n\r\n            return result;\r\n        }\r\n    }\r\n    result.push(polygon);\r\n\r\n    return result;\r\n}\r\n\r\n/**\r\n * Remove collinear points in the polygon.\r\n * @method removeCollinearPoints\r\n * @param  {Number} [precision] The threshold angle to use when determining whether two edges are collinear. Use zero for finest precision.\r\n * @return {Number}           The number of points removed\r\n */\r\nfunction polygonRemoveCollinearPoints(polygon, precision){\r\n    var num = 0;\r\n    for(var i=polygon.length-1; polygon.length>3 && i>=0; --i){\r\n        if(collinear(polygonAt(polygon, i-1),polygonAt(polygon, i),polygonAt(polygon, i+1),precision)){\r\n            // Remove the middle point\r\n            polygon.splice(i%polygon.length,1);\r\n            num++;\r\n        }\r\n    }\r\n    return num;\r\n}\r\n\r\n/**\r\n * Remove duplicate points in the polygon.\r\n * @method removeDuplicatePoints\r\n * @param  {Number} [precision] The threshold to use when determining whether two points are the same. Use zero for best precision.\r\n */\r\nfunction polygonRemoveDuplicatePoints(polygon, precision){\r\n    for(var i=polygon.length-1; i>=1; --i){\r\n        var pi = polygon[i];\r\n        for(var j=i-1; j>=0; --j){\r\n            if(points_eq(pi, polygon[j], precision)){\r\n                polygon.splice(i,1);\r\n                continue;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * Check if two scalars are equal\r\n * @static\r\n * @method eq\r\n * @param  {Number} a\r\n * @param  {Number} b\r\n * @param  {Number} [precision]\r\n * @return {Boolean}\r\n */\r\nfunction scalar_eq(a,b,precision){\r\n    precision = precision || 0;\r\n    return Math.abs(a-b) <= precision;\r\n}\r\n\r\n/**\r\n * Check if two points are equal\r\n * @static\r\n * @method points_eq\r\n * @param  {Array} a\r\n * @param  {Array} b\r\n * @param  {Number} [precision]\r\n * @return {Boolean}\r\n */\r\nfunction points_eq(a,b,precision){\r\n    return scalar_eq(a[0],b[0],precision) && scalar_eq(a[1],b[1],precision);\r\n}\r\n","/*\r\n * https://github.com/josephg/noisejs\r\n * A speed-improved perlin and simplex noise algorithms for 2D.\r\n *\r\n * Based on example code by Stefan Gustavson (stegu@itn.liu.se).\r\n * Optimisations by Peter Eastman (peastman@drizzle.stanford.edu).\r\n * Better rank ordering method by Stefan Gustavson in 2012.\r\n * Converted to Javascript by Joseph Gentle.\r\n *\r\n * Version 2012-03-09\r\n *\r\n * This code was placed in the public domain by its original author,\r\n * Stefan Gustavson. You may use it as you see fit, but\r\n * attribution is appreciated.\r\n *\r\n */\r\n\r\n(function(global){\r\n\tvar module = global.noise = {};\r\n  \r\n\tfunction Grad(x, y, z) {\r\n\t  this.x = x; this.y = y; this.z = z;\r\n\t}\r\n\t\r\n\tGrad.prototype.dot2 = function(x, y) {\r\n\t  return this.x*x + this.y*y;\r\n\t};\r\n  \r\n\tGrad.prototype.dot3 = function(x, y, z) {\r\n\t  return this.x*x + this.y*y + this.z*z;\r\n\t};\r\n  \r\n\tvar grad3 = [new Grad(1,1,0),new Grad(-1,1,0),new Grad(1,-1,0),new Grad(-1,-1,0),\r\n\t\t\t\t new Grad(1,0,1),new Grad(-1,0,1),new Grad(1,0,-1),new Grad(-1,0,-1),\r\n\t\t\t\t new Grad(0,1,1),new Grad(0,-1,1),new Grad(0,1,-1),new Grad(0,-1,-1)];\r\n  \r\n\tvar p = [151,160,137,91,90,15,\r\n\t131,13,201,95,96,53,194,233,7,225,140,36,103,30,69,142,8,99,37,240,21,10,23,\r\n\t190, 6,148,247,120,234,75,0,26,197,62,94,252,219,203,117,35,11,32,57,177,33,\r\n\t88,237,149,56,87,174,20,125,136,171,168, 68,175,74,165,71,134,139,48,27,166,\r\n\t77,146,158,231,83,111,229,122,60,211,133,230,220,105,92,41,55,46,245,40,244,\r\n\t102,143,54, 65,25,63,161, 1,216,80,73,209,76,132,187,208, 89,18,169,200,196,\r\n\t135,130,116,188,159,86,164,100,109,198,173,186, 3,64,52,217,226,250,124,123,\r\n\t5,202,38,147,118,126,255,82,85,212,207,206,59,227,47,16,58,17,182,189,28,42,\r\n\t223,183,170,213,119,248,152, 2,44,154,163, 70,221,153,101,155,167, 43,172,9,\r\n\t129,22,39,253, 19,98,108,110,79,113,224,232,178,185, 112,104,218,246,97,228,\r\n\t251,34,242,193,238,210,144,12,191,179,162,241, 81,51,145,235,249,14,239,107,\r\n\t49,192,214, 31,181,199,106,157,184, 84,204,176,115,121,50,45,127, 4,150,254,\r\n\t138,236,205,93,222,114,67,29,24,72,243,141,128,195,78,66,215,61,156,180];\r\n\t// To remove the need for index wrapping, double the permutation table length\r\n\tvar perm = new Array(512);\r\n\tvar gradP = new Array(512);\r\n  \r\n\t// This isn't a very good seeding function, but it works ok. It supports 2^16\r\n\t// different seed values. Write something better if you need more seeds.\r\n\tmodule.seed = function(seed) {\r\n\t  if(seed > 0 && seed < 1) {\r\n\t\t// Scale the seed out\r\n\t\tseed *= 65536;\r\n\t  }\r\n  \r\n\t  seed = Math.floor(seed);\r\n\t  if(seed < 256) {\r\n\t\tseed |= seed << 8;\r\n\t  }\r\n  \r\n\t  for(var i = 0; i < 256; i++) {\r\n\t\tvar v;\r\n\t\tif (i & 1) {\r\n\t\t  v = p[i] ^ (seed & 255);\r\n\t\t} else {\r\n\t\t  v = p[i] ^ ((seed>>8) & 255);\r\n\t\t}\r\n  \r\n\t\tperm[i] = perm[i + 256] = v;\r\n\t\tgradP[i] = gradP[i + 256] = grad3[v % 12];\r\n\t  }\r\n\t};\r\n  \r\n\tmodule.seed(0);\r\n  \r\n\t/*\r\n\tfor(var i=0; i<256; i++) {\r\n\t  perm[i] = perm[i + 256] = p[i];\r\n\t  gradP[i] = gradP[i + 256] = grad3[perm[i] % 12];\r\n\t}*/\r\n  \r\n\t// Skewing and unskewing factors for 2, 3, and 4 dimensions\r\n\tvar F2 = 0.5*(Math.sqrt(3)-1);\r\n\tvar G2 = (3-Math.sqrt(3))/6;\r\n  \r\n\tvar F3 = 1/3;\r\n\tvar G3 = 1/6;\r\n  \r\n\t// 2D simplex noise\r\n\tmodule.simplex2 = function(xin, yin) {\r\n\t  var n0, n1, n2; // Noise contributions from the three corners\r\n\t  // Skew the input space to determine which simplex cell we're in\r\n\t  var s = (xin+yin)*F2; // Hairy factor for 2D\r\n\t  var i = Math.floor(xin+s);\r\n\t  var j = Math.floor(yin+s);\r\n\t  var t = (i+j)*G2;\r\n\t  var x0 = xin-i+t; // The x,y distances from the cell origin, unskewed.\r\n\t  var y0 = yin-j+t;\r\n\t  // For the 2D case, the simplex shape is an equilateral triangle.\r\n\t  // Determine which simplex we are in.\r\n\t  var i1, j1; // Offsets for second (middle) corner of simplex in (i,j) coords\r\n\t  if(x0>y0) { // lower triangle, XY order: (0,0)->(1,0)->(1,1)\r\n\t\ti1=1; j1=0;\r\n\t  } else {    // upper triangle, YX order: (0,0)->(0,1)->(1,1)\r\n\t\ti1=0; j1=1;\r\n\t  }\r\n\t  // A step of (1,0) in (i,j) means a step of (1-c,-c) in (x,y), and\r\n\t  // a step of (0,1) in (i,j) means a step of (-c,1-c) in (x,y), where\r\n\t  // c = (3-sqrt(3))/6\r\n\t  var x1 = x0 - i1 + G2; // Offsets for middle corner in (x,y) unskewed coords\r\n\t  var y1 = y0 - j1 + G2;\r\n\t  var x2 = x0 - 1 + 2 * G2; // Offsets for last corner in (x,y) unskewed coords\r\n\t  var y2 = y0 - 1 + 2 * G2;\r\n\t  // Work out the hashed gradient indices of the three simplex corners\r\n\t  i &= 255;\r\n\t  j &= 255;\r\n\t  var gi0 = gradP[i+perm[j]];\r\n\t  var gi1 = gradP[i+i1+perm[j+j1]];\r\n\t  var gi2 = gradP[i+1+perm[j+1]];\r\n\t  // Calculate the contribution from the three corners\r\n\t  var t0 = 0.5 - x0*x0-y0*y0;\r\n\t  if(t0<0) {\r\n\t\tn0 = 0;\r\n\t  } else {\r\n\t\tt0 *= t0;\r\n\t\tn0 = t0 * t0 * gi0.dot2(x0, y0);  // (x,y) of grad3 used for 2D gradient\r\n\t  }\r\n\t  var t1 = 0.5 - x1*x1-y1*y1;\r\n\t  if(t1<0) {\r\n\t\tn1 = 0;\r\n\t  } else {\r\n\t\tt1 *= t1;\r\n\t\tn1 = t1 * t1 * gi1.dot2(x1, y1);\r\n\t  }\r\n\t  var t2 = 0.5 - x2*x2-y2*y2;\r\n\t  if(t2<0) {\r\n\t\tn2 = 0;\r\n\t  } else {\r\n\t\tt2 *= t2;\r\n\t\tn2 = t2 * t2 * gi2.dot2(x2, y2);\r\n\t  }\r\n\t  // Add contributions from each corner to get the final noise value.\r\n\t  // The result is scaled to return values in the interval [-1,1].\r\n\t  return 70 * (n0 + n1 + n2);\r\n\t};\r\n  \r\n\t// 3D simplex noise\r\n\tmodule.simplex3 = function(xin, yin, zin) {\r\n\t  var n0, n1, n2, n3; // Noise contributions from the four corners\r\n  \r\n\t  // Skew the input space to determine which simplex cell we're in\r\n\t  var s = (xin+yin+zin)*F3; // Hairy factor for 2D\r\n\t  var i = Math.floor(xin+s);\r\n\t  var j = Math.floor(yin+s);\r\n\t  var k = Math.floor(zin+s);\r\n  \r\n\t  var t = (i+j+k)*G3;\r\n\t  var x0 = xin-i+t; // The x,y distances from the cell origin, unskewed.\r\n\t  var y0 = yin-j+t;\r\n\t  var z0 = zin-k+t;\r\n  \r\n\t  // For the 3D case, the simplex shape is a slightly irregular tetrahedron.\r\n\t  // Determine which simplex we are in.\r\n\t  var i1, j1, k1; // Offsets for second corner of simplex in (i,j,k) coords\r\n\t  var i2, j2, k2; // Offsets for third corner of simplex in (i,j,k) coords\r\n\t  if(x0 >= y0) {\r\n\t\tif(y0 >= z0)      { i1=1; j1=0; k1=0; i2=1; j2=1; k2=0; }\r\n\t\telse if(x0 >= z0) { i1=1; j1=0; k1=0; i2=1; j2=0; k2=1; }\r\n\t\telse              { i1=0; j1=0; k1=1; i2=1; j2=0; k2=1; }\r\n\t  } else {\r\n\t\tif(y0 < z0)      { i1=0; j1=0; k1=1; i2=0; j2=1; k2=1; }\r\n\t\telse if(x0 < z0) { i1=0; j1=1; k1=0; i2=0; j2=1; k2=1; }\r\n\t\telse             { i1=0; j1=1; k1=0; i2=1; j2=1; k2=0; }\r\n\t  }\r\n\t  // A step of (1,0,0) in (i,j,k) means a step of (1-c,-c,-c) in (x,y,z),\r\n\t  // a step of (0,1,0) in (i,j,k) means a step of (-c,1-c,-c) in (x,y,z), and\r\n\t  // a step of (0,0,1) in (i,j,k) means a step of (-c,-c,1-c) in (x,y,z), where\r\n\t  // c = 1/6.\r\n\t  var x1 = x0 - i1 + G3; // Offsets for second corner\r\n\t  var y1 = y0 - j1 + G3;\r\n\t  var z1 = z0 - k1 + G3;\r\n  \r\n\t  var x2 = x0 - i2 + 2 * G3; // Offsets for third corner\r\n\t  var y2 = y0 - j2 + 2 * G3;\r\n\t  var z2 = z0 - k2 + 2 * G3;\r\n  \r\n\t  var x3 = x0 - 1 + 3 * G3; // Offsets for fourth corner\r\n\t  var y3 = y0 - 1 + 3 * G3;\r\n\t  var z3 = z0 - 1 + 3 * G3;\r\n  \r\n\t  // Work out the hashed gradient indices of the four simplex corners\r\n\t  i &= 255;\r\n\t  j &= 255;\r\n\t  k &= 255;\r\n\t  var gi0 = gradP[i+   perm[j+   perm[k   ]]];\r\n\t  var gi1 = gradP[i+i1+perm[j+j1+perm[k+k1]]];\r\n\t  var gi2 = gradP[i+i2+perm[j+j2+perm[k+k2]]];\r\n\t  var gi3 = gradP[i+ 1+perm[j+ 1+perm[k+ 1]]];\r\n  \r\n\t  // Calculate the contribution from the four corners\r\n\t  var t0 = 0.6 - x0*x0 - y0*y0 - z0*z0;\r\n\t  if(t0<0) {\r\n\t\tn0 = 0;\r\n\t  } else {\r\n\t\tt0 *= t0;\r\n\t\tn0 = t0 * t0 * gi0.dot3(x0, y0, z0);  // (x,y) of grad3 used for 2D gradient\r\n\t  }\r\n\t  var t1 = 0.6 - x1*x1 - y1*y1 - z1*z1;\r\n\t  if(t1<0) {\r\n\t\tn1 = 0;\r\n\t  } else {\r\n\t\tt1 *= t1;\r\n\t\tn1 = t1 * t1 * gi1.dot3(x1, y1, z1);\r\n\t  }\r\n\t  var t2 = 0.6 - x2*x2 - y2*y2 - z2*z2;\r\n\t  if(t2<0) {\r\n\t\tn2 = 0;\r\n\t  } else {\r\n\t\tt2 *= t2;\r\n\t\tn2 = t2 * t2 * gi2.dot3(x2, y2, z2);\r\n\t  }\r\n\t  var t3 = 0.6 - x3*x3 - y3*y3 - z3*z3;\r\n\t  if(t3<0) {\r\n\t\tn3 = 0;\r\n\t  } else {\r\n\t\tt3 *= t3;\r\n\t\tn3 = t3 * t3 * gi3.dot3(x3, y3, z3);\r\n\t  }\r\n\t  // Add contributions from each corner to get the final noise value.\r\n\t  // The result is scaled to return values in the interval [-1,1].\r\n\t  return 32 * (n0 + n1 + n2 + n3);\r\n  \r\n\t};\r\n  \r\n\t// ##### Perlin noise stuff\r\n  \r\n\tfunction fade(t) {\r\n\t  return t*t*t*(t*(t*6-15)+10);\r\n\t}\r\n  \r\n\tfunction lerp(a, b, t) {\r\n\t  return (1-t)*a + t*b;\r\n\t}\r\n  \r\n\t// 2D Perlin Noise\r\n\tmodule.perlin2 = function(x, y) {\r\n\t  // Find unit grid cell containing point\r\n\t  var X = Math.floor(x), Y = Math.floor(y);\r\n\t  // Get relative xy coordinates of point within that cell\r\n\t  x = x - X; y = y - Y;\r\n\t  // Wrap the integer cells at 255 (smaller integer period can be introduced here)\r\n\t  X = X & 255; Y = Y & 255;\r\n  \r\n\t  // Calculate noise contributions from each of the four corners\r\n\t  var n00 = gradP[X+perm[Y]].dot2(x, y);\r\n\t  var n01 = gradP[X+perm[Y+1]].dot2(x, y-1);\r\n\t  var n10 = gradP[X+1+perm[Y]].dot2(x-1, y);\r\n\t  var n11 = gradP[X+1+perm[Y+1]].dot2(x-1, y-1);\r\n  \r\n\t  // Compute the fade curve value for x\r\n\t  var u = fade(x);\r\n  \r\n\t  // Interpolate the four results\r\n\t  return lerp(\r\n\t\t  lerp(n00, n10, u),\r\n\t\t  lerp(n01, n11, u),\r\n\t\t fade(y));\r\n\t};\r\n  \r\n\t// 3D Perlin Noise\r\n\tmodule.perlin3 = function(x, y, z) {\r\n\t  // Find unit grid cell containing point\r\n\t  var X = Math.floor(x), Y = Math.floor(y), Z = Math.floor(z);\r\n\t  // Get relative xyz coordinates of point within that cell\r\n\t  x = x - X; y = y - Y; z = z - Z;\r\n\t  // Wrap the integer cells at 255 (smaller integer period can be introduced here)\r\n\t  X = X & 255; Y = Y & 255; Z = Z & 255;\r\n  \r\n\t  // Calculate noise contributions from each of the eight corners\r\n\t  var n000 = gradP[X+  perm[Y+  perm[Z  ]]].dot3(x,   y,     z);\r\n\t  var n001 = gradP[X+  perm[Y+  perm[Z+1]]].dot3(x,   y,   z-1);\r\n\t  var n010 = gradP[X+  perm[Y+1+perm[Z  ]]].dot3(x,   y-1,   z);\r\n\t  var n011 = gradP[X+  perm[Y+1+perm[Z+1]]].dot3(x,   y-1, z-1);\r\n\t  var n100 = gradP[X+1+perm[Y+  perm[Z  ]]].dot3(x-1,   y,   z);\r\n\t  var n101 = gradP[X+1+perm[Y+  perm[Z+1]]].dot3(x-1,   y, z-1);\r\n\t  var n110 = gradP[X+1+perm[Y+1+perm[Z  ]]].dot3(x-1, y-1,   z);\r\n\t  var n111 = gradP[X+1+perm[Y+1+perm[Z+1]]].dot3(x-1, y-1, z-1);\r\n  \r\n\t  // Compute the fade curve value for x, y, z\r\n\t  var u = fade(x);\r\n\t  var v = fade(y);\r\n\t  var w = fade(z);\r\n  \r\n\t  // Interpolate\r\n\t  return lerp(\r\n\t\t  lerp(\r\n\t\t\tlerp(n000, n100, u),\r\n\t\t\tlerp(n001, n101, u), w),\r\n\t\t  lerp(\r\n\t\t\tlerp(n010, n110, u),\r\n\t\t\tlerp(n011, n111, u), w),\r\n\t\t v);\r\n\t};\r\n  \r\n  })(this);","\"use strict\";\r\n\r\nconst vec = require(\"../geometry/vec.js\");\r\n\r\nmodule.exports = class Node {\r\n\tstatic id = 0;\r\n\t/**\r\n\t * Generates a unique id for nodes\r\n\t * @returns {Number} A unique integer id\r\n\t */\r\n\tstatic getUniqueId() {\r\n\t\treturn ++Node.id;\r\n\t}\r\n\r\n\tposition = new vec(0, 0);\r\n\tchildren = new Set();\r\n\tadded = false;\r\n\r\n\t/**\r\n\t * Creates a Node\r\n\t */\r\n\tconstructor() {\r\n\t\tthis.id = Node.getUniqueId();\r\n\t}\r\n\r\n\t/**\r\n\t * Sets this node's position to `position`\r\n\t * @param {vec} position - Position the node should be set to\r\n\t */\r\n\tsetPosition(position) {\r\n\t\tlet delta = position.sub(this.position);\r\n\t\tthis.translate(delta);\r\n\t}\r\n\t/**\r\n\t * Shifts this node's position by `positionDelta`\r\n\t * @param {vec} positionDelta - Amount to shift the position\r\n\t */\r\n\ttranslate(positionDelta) {\r\n\t\tthis.position.add2(positionDelta);\r\n\t\tfor (let child of this.children) {\r\n\t\t\tchild.translate(delta);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Adds this node and its children\r\n\t * @returns {void}\r\n\t */\r\n\tadd() {\r\n\t\tif (!this.added) {\r\n\t\t\tthis.trigger(\"add\");\r\n\t\t\tthis.added = true;\r\n\r\n\t\t\tfor (let child of this.children) {\r\n\t\t\t\tchild.add();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\t/**\r\n\t * Removes this node and its children\r\n\t * @returns {void}\r\n\t */\r\n\tdelete() {\r\n\t\tif (this.added) {\r\n\t\t\tthis.trigger(\"delete\");\r\n\t\t\tthis.added = false;\r\n\t\r\n\t\t\tfor (let child of this.children) {\r\n\t\t\t\tchild.delete();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Adds all `children` to this node's children\r\n\t * @param {...Node} children - The child nodes to be added\r\n\t */\r\n\taddChild(...children) {\r\n\t\tfor (let child of children) {\r\n\t\t\tthis.children.add(child);\r\n\t\t}\r\n\t}\r\n\t/**\r\n\t * Removes all `children` from this node's children\r\n\t * @param {...Node} children - The child nodes to be removed\r\n\t */\r\n\tremoveChild(...children) {\r\n\t\tfor (let child of children) {\r\n\t\t\tthis.children.delete(child);\r\n\t\t}\r\n\t}\r\n\r\n\t\r\n\t#events = {\r\n\t\tdelete: [],\r\n\t\tadd: [],\r\n\t}\r\n\ton(event, callback) {\r\n\t\tif (this.#events[event]) {\r\n\t\t\tthis.#events[event].push(callback);\r\n\t\t}\r\n\t\telse {\r\n\t\t\tconsole.warn(event + \" is not a valid event\");\r\n\t\t}\r\n\t}\r\n\toff(event, callback) {\r\n\t\tevent = this.#events[event];\r\n\t\tif (event.includes(callback)) {\r\n\t\t\tevent.splice(event.indexOf(callback), 1);\r\n\t\t}\r\n\t}\r\n\ttrigger(event) {\r\n\t\t// Trigger each event\r\n\t\tif (this.#events[event]) {\r\n\t\t\tthis.#events[event].forEach(callback => {\r\n\t\t\t\tcallback();\r\n\t\t\t});\r\n\t\t}\r\n\t}\r\n}\r\n","const Node = require(\"../node/Node.js\");\r\nconst Common = require(\"../core/Common.js\")\r\nconst Grid = require(\"../geometry/Grid.js\");\r\nconst vec = require(\"../geometry/vec.js\");\r\nconst RigidBody = require(\"../physics/RigidBody.js\");\r\n\r\nmodule.exports = class World extends Node {\r\n\tstatic defaultOptions = {\r\n\t\tgravity: new vec(0, 500),\r\n\t\tgridSize: 500,\r\n\t}\r\n\t\r\n\tgravity = new vec(0, 0);\r\n\ttimescale = 1;\r\n\ttime = 0;\r\n\r\n\tbodies = new Set();\r\n\tconstraints = new Set();\r\n\tpairs = {};\r\n\r\n\tdynamicGrid;\r\n\tstaticGrid;\r\n\t\r\n\tglobalPoints = [];\r\n\tglobalVectors = [];\r\n\t\r\n\tconstructor(options = {}) {\r\n\t\tsuper();\r\n\t\tlet defaults = { ...World.defaultOptions };\r\n\t\tCommon.merge(defaults, options, 1);\r\n\t\toptions = defaults;\r\n\r\n\t\tlet { gravity, gridSize } = options;\r\n\t\tthis.gravity = new vec(gravity);\r\n\t\tthis.dynamicGrid = new Grid(gridSize);\r\n\t\tthis.staticGrid = new Grid(gridSize);\r\n\t}\r\n\r\n\tcanCollide(filterA, filterB) {\r\n\t\tlet { layer: layerA, mask: maskA } = filterA;\r\n\t\tlet { layer: layerB, mask: maskB } = filterB;\r\n\r\n\t\tlet canA = (maskA & layerB) !== 0;\r\n\t\tlet canB = (maskB & layerA) !== 0;\r\n\r\n\t\treturn canA || canB;\r\n\t}\r\n\t#getPairs(bodies) {\r\n\t\tlet pairs = [];\r\n\t\tlet canCollide = this.canCollide;\r\n\r\n\t\tfor (let i = 0; i < bodies.length - 1; i++) {\r\n\t\t\tlet bodyA = bodies[i];\r\n\t\t\tif (!bodyA.added) {\r\n\t\t\t\tif (bodyA.isStatic) {\r\n\t\t\t\t\tthis.staticGrid.removeBody(bodyA);\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tthis.dynamicGrid.removeBody(bodyA);\r\n\t\t\t\t}\r\n\t\t\t\tcontinue;\r\n\t\t\t}\r\n\t\t\tif (!bodyA.hasCollisions)\r\n\t\t\t\tcontinue;\r\n\t\t\t\r\n\t\t\tfor (let j = i + 1; j < bodies.length; j++) {\r\n\t\t\t\t// Do AABB collision test\r\n\t\t\t\tlet bodyB = bodies[j];\r\n\r\n\t\t\t\tif (!bodyB.added) {\r\n\t\t\t\t\tif (bodyB.isStatic) {\r\n\t\t\t\t\t\tthis.staticGrid.removeBody(bodyB);\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\tthis.dynamicGrid.removeBody(bodyB);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tcontinue;\r\n\t\t\t\t}\r\n\t\t\t\tif (!bodyB.hasCollisions || bodyA.parent && bodyA.parent === bodyB.parent)\r\n\t\t\t\t\tcontinue;\r\n\t\t\t\tif (!canCollide(bodyA.collisionFilter, bodyB.collisionFilter))\r\n\t\t\t\t\tcontinue;\r\n\t\t\t\t\r\n\r\n\t\t\t\tconst boundsA = bodyA.bounds;\r\n\t\t\t\tconst boundsB = bodyB.bounds;\r\n\r\n\t\t\t\tif (boundsA.min.x <= boundsB.max.x &&\r\n\t\t\t\t\tboundsA.max.x >= boundsB.min.x &&\r\n\t\t\t\t\tboundsA.min.y <= boundsB.max.y &&\r\n\t\t\t\t\tboundsA.max.y >= boundsB.min.y) {\r\n\t\t\t\t\tpairs.push([ bodyA, bodyB ]);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn pairs;\r\n\t}\r\n\tget collisionPairs() {\r\n\t\tlet canCollide = this.canCollide;\r\n\t\tlet dynamicGrid = this.dynamicGrid;\r\n\t\tlet staticGrid = this.staticGrid;\r\n\t\tlet pair = Common.pairCommon;\r\n\t\tlet pairIds = new Set();\r\n\t\tlet pairs = [];\r\n\r\n\t\tlet dynamicBuckets = dynamicGrid.grid;\r\n\t\tlet staticBuckets = staticGrid.grid;\r\n\t\tlet bucketIds = dynamicGrid.gridIds;\r\n\r\n\t\tfor (let id of bucketIds) {\r\n\t\t\tlet curDynamicBucket = dynamicBuckets[id];\r\n\t\t\tlet curStaticBucket = staticBuckets[id];\r\n\t\t\tlet curPairs = this.#getPairs(curDynamicBucket); // pair dynamic bodies\r\n\r\n\t\t\t// add static bodies\r\n\t\t\tif (curStaticBucket) {\r\n\t\t\t\tfor (let j = 0; j < curDynamicBucket.length; j++) {\r\n\t\t\t\t\tlet bodyA = curDynamicBucket[j];\r\n\t\t\t\t\tif (!bodyA.hasCollisions)\r\n\t\t\t\t\t\tcontinue;\r\n\t\t\t\t\tfor (let k = 0; k < curStaticBucket.length; k++) {\r\n\t\t\t\t\t\tlet bodyB = curStaticBucket[k];\r\n\r\n\t\t\t\t\t\tif (!bodyB.hasCollisions || bodyA.isStatic && bodyB.isStatic || bodyA.parent && bodyA.parent === bodyB.parent)\r\n\t\t\t\t\t\t\tcontinue;\r\n\t\t\t\t\t\tif (!canCollide(bodyA.collisionFilter, bodyB.collisionFilter))\r\n\t\t\t\t\t\t\tcontinue;\r\n\t\r\n\t\r\n\t\t\t\t\t\tconst boundsA = bodyA.bounds;\r\n\t\t\t\t\t\tconst boundsB = bodyB.bounds;\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tif (boundsA.min.x <= boundsB.max.x &&\r\n\t\t\t\t\t\t\tboundsA.max.x >= boundsB.min.x &&\r\n\t\t\t\t\t\t\tboundsA.min.y <= boundsB.max.y &&\r\n\t\t\t\t\t\t\tboundsA.max.y >= boundsB.min.y) {\r\n\t\t\t\t\t\t\tcurPairs.push([ bodyA, bodyB ]);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tfor (let j = 0; j < curPairs.length; j++) {\r\n\t\t\t\tlet curPair = curPairs[j];\r\n\t\t\t\tlet n = pair(curPair[0].id, curPair[1].id);\r\n\t\t\t\tif (!pairIds.has(n)) {\r\n\t\t\t\t\tpairIds.add(n);\r\n\t\t\t\t\tpairs.push(curPair);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn pairs;\r\n\t}\r\n\r\n\taddChild(...children) {\r\n\t\tsuper.addChild(...children);\r\n\r\n\t\tfor (let child of children) {\r\n\t\t\t// Add to engine\r\n\t\t\tif (child instanceof RigidBody) {\r\n\t\t\t\tthis.bodies.add(child);\r\n\t\t\t}\r\n\r\n\t\t\t// Add to grids\r\n\t\t\tif (child.isStatic) {\r\n\t\t\t\tthis.staticGrid.addBody(child);\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tthis.dynamicGrid.addBody(child);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\tremoveChild(...children) {\r\n\t\tsuper.removeChild(...children);\r\n\r\n\t\tfor (let child of children) {\r\n\t\t\t// Add to engine\r\n\t\t\tif (child instanceof RigidBody) {\r\n\t\t\t\tthis.bodies.delete(child);\r\n\t\t\t}\r\n\r\n\t\t\t// Remove from grids\r\n\t\t\tif (child._Grids) {\r\n\t\t\t\tif (child._Grids[this.staticGrid.id]) {\r\n\t\t\t\t\tthis.staticGrid.removeBody(child);\r\n\t\t\t\t}\r\n\t\t\t\tif (child._Grids[this.dynamicGrid.id]) {\r\n\t\t\t\t\tthis.dynamicGrid.removeBody(child);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}\r\n","const vec = require(\"../geometry/vec.js\");\r\nconst Common = require(\"../core/Common.js\");\r\nconst Performance = require(\"../core/Performance.js\");\r\nconst Bodies = require(\"../bodies/Bodies.js\");\r\nconst RigidBody = require(\"./RigidBody.js\");\r\n\r\nmodule.exports = class Engine {\r\n\tstatic defaultOptions = {\r\n\t\tdelta: 1,\r\n\t\tsubsteps: 5,\r\n\t\tvelocityIterations: 1,\r\n\t\tpositionIterations: 5,\r\n\t\tconstraintIterations: 1,\r\n\t\tmaxShare: 1,\r\n\t}\r\n\r\n\tdelta = 1;\r\n\tsubsteps = 5;\r\n\tvelocityIterations = 1;\r\n\tpositionIterations = 5;\r\n\tconstraintIterations = 1;\r\n\tmaxShare = 1;\r\n\r\n\t/**\r\n\t * \r\n\t * @param {World} World - The world the physics engine should run on\r\n\t * @param {Object} options - Options for the engine, see documentation for possible options\r\n\t */\r\n\tconstructor(World, options = {}) {\r\n\t\tlet defaults = { ...Engine.defaultOptions };\r\n\t\tCommon.merge(defaults, options, 1);\r\n\t\toptions = defaults;\r\n\t\t\r\n\t\t// Shallow copy options\r\n\t\tlet mutableProperties = [`substeps`, `velocityIterations`, `positionIterations`, `constraintIterations`, `maxShare`];\r\n\t\tfor (let propertyName of mutableProperties) {\r\n\t\t\tif (options[propertyName] != undefined && typeof this[propertyName] != \"function\") {\r\n\t\t\t\tthis[propertyName] = options[propertyName];\r\n\t\t\t}\r\n\t\t}\r\n\t\tthis.World = World;\r\n\t\tthis.Performance = new Performance();\r\n\t}\r\n\r\n\t/**\r\n\t * Ticks the engine one frame\r\n\t * @param {Number} delta - (Optional) Engine tick duration, in seconds\r\n\t */\r\n\tupdate = function(delta) {\r\n\t\tconst { World, Performance, substeps } = this;\r\n\t\tconst { bodies } = World;\r\n\r\n\t\t// Get delta\r\n\t\tif (delta === undefined) {\r\n\t\t\tdelta = Performance.delta * World.timescale;\r\n\t\t}\r\n\t\tWorld.time += delta;\r\n\t\tdelta /= substeps;\r\n\t\tthis.delta = delta;\r\n\r\n\t\t// Get timing\r\n\t\tPerformance.update();\r\n\r\n\t\tfor (let step = 0; step < substeps; step++) {\r\n\t\t\tPerformance.frame++;\r\n\t\t\t\r\n\t\t\t// Update positions / angles\r\n\t\t\tfor (let body of bodies) {\r\n\t\t\t\tbody._update(delta);\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\t// Find collisions\r\n\t\t\tWorld.globalVectors = [];\r\n\t\t\tWorld.globalPoints = [];\r\n\t\t\t\r\n\t\t\tconst pairs = World.collisionPairs;\r\n\t\t\tfor (let i = 0; i < pairs.length; i++) {\r\n\t\t\t\tlet bodyA = pairs[i][0];\r\n\t\t\t\tlet bodyB = pairs[i][1];\t\r\n\t\t\t\tif (this.collides(bodyA, bodyB)) {\r\n\t\t\t\t\tthis.createPair(bodyA, bodyB);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\t// Apply forces\r\n\t\t\tfor (let body of bodies) {\r\n\t\t\t\tbody._preUpdate(delta);\r\n\t\t\t}\r\n\r\n\t\t\t// Solve for velocities\r\n\t\t\tfor (let i = 0; i < this.velocityIterations; i++) {\r\n\t\t\t\tthis.solveVelocity(delta);\r\n\t\t\t}\r\n\t\t\tfor (let i = 0; i < this.positionIterations; i++) {\r\n\t\t\t\tthis.solvePositions();\r\n\t\t\t}\r\n\t\t\tthis.solveConstraints(delta);\r\n\t\t}\r\n\r\n\t\tthis.delta = delta * substeps;\r\n\t}\r\n\r\n\t/**\r\n\t * Checks if `bodyA` and `bodyB` are colliding\r\n\t * @param {RigidBody} bodyA - 1st body to check\r\n\t * @param {RigidBody} bodyB - 2nd body to check\r\n\t * @returns {Boolean} If the bodies are colliding\r\n\t */\r\n\tcollides(bodyA, bodyB) {\r\n\t\tif (bodyA.isStatic && bodyB.isStatic) return false;\r\n\r\n\t\tlet collision = true;\r\n\r\n\t\tfunction getAllSupports(body, direction) {\r\n\t\t\tlet vertices = body.vertices;\r\n\t\t\tlet maxDist = -Infinity;\r\n\t\t\tlet minDist = Infinity;\r\n\t\t\t// let maxVert, minVert;\r\n\r\n\t\t\tfor (let i = 0; i < vertices.length; i++) {\r\n\t\t\t\tlet dist = direction.dot(vertices[i]);\r\n\r\n\t\t\t\tif (dist > maxDist) {\r\n\t\t\t\t\tmaxDist = dist;\r\n\t\t\t\t\t// maxVert = i;\r\n\t\t\t\t}\r\n\t\t\t\tif (dist < minDist) {\r\n\t\t\t\t\tminDist = dist;\r\n\t\t\t\t\t// minVert = i;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\treturn { max: maxDist, min: minDist };\r\n\t\t}\r\n\r\n\t\t// - find if colliding with SAT\r\n\t\t// ~ reuse last separation axis\r\n\t\tif (bodyA._lastSeparations[bodyB.id]) {\r\n\t\t\tlet axis = bodyA._lastSeparations[bodyB.id];\r\n\t\t\tlet supportsA = getAllSupports(bodyA, axis);\r\n\t\t\tlet supportsB = getAllSupports(bodyB, axis);\r\n\t\t\tlet overlap = Math.min(supportsA.max - supportsB.min, supportsB.max - supportsA.min);\r\n\r\n\t\t\tif (overlap < 0) {\r\n\t\t\t\tcollision = false;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tdelete bodyA._lastSeparations[bodyB.id];\r\n\t\t\t\tdelete bodyB._lastSeparations[bodyA.id];\r\n\t\t\t}\r\n\t\t}\r\n\t\tif (collision) { // last separation didn't work - try all axes\r\n\t\t\t// ~ bodyA axes\r\n\t\t\tfor (let j = 0; j < bodyA._axes.length; j++) {\r\n\t\t\t\tlet axis = bodyA._axes[j];\r\n\t\t\t\tlet supportsA = getAllSupports(bodyA, axis);\r\n\t\t\t\tlet supportsB = getAllSupports(bodyB, axis);\r\n\t\t\t\tlet overlap = Math.min(supportsA.max - supportsB.min, supportsB.max - supportsA.min);\r\n\r\n\t\t\t\tif (overlap < 0) {\r\n\t\t\t\t\tcollision = false;\r\n\t\t\t\t\tbodyA._lastSeparations[bodyB.id] = axis;\r\n\t\t\t\t\tbodyB._lastSeparations[bodyA.id] = axis;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t// ~ bodyB axes\r\n\t\t\tfor (let j = 0; j < bodyB._axes.length; j++) {\r\n\t\t\t\tlet axis = bodyB._axes[j];\r\n\t\t\t\tlet supportsA = getAllSupports(bodyB, axis);\r\n\t\t\t\tlet supportsB = getAllSupports(bodyA, axis);\r\n\t\t\t\tlet overlap = Math.min(supportsA.max - supportsB.min, supportsB.max - supportsA.min);\r\n\t\t\t\t\r\n\t\t\t\tif (overlap < 0) {\r\n\t\t\t\t\tcollision = false;\r\n\t\t\t\t\tbodyA._lastSeparations[bodyB.id] = axis;\r\n\t\t\t\t\tbodyB._lastSeparations[bodyA.id] = axis;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn collision;\r\n\t}\r\n\r\n\t/**\r\n\t * Creates a collision pair between `bodyA` and `bodyB`\r\n\t * @param {RigidBody} bodyA - 1st body to pair\r\n\t * @param {RigidBody} bodyB - 2nd body to pair\r\n\t */\r\n\tcreatePair(bodyA, bodyB) {\r\n\t\tconst { World, Performance } = this;\r\n\t\tlet minDepth = Infinity;\r\n\t\tlet normal;\r\n\t\tlet normalPoint;\r\n\t\tlet contactBody;\r\n\t\tlet normalBody;\r\n\t\tlet contacts = [];\r\n\t\tlet numContacts = 0;\r\n\r\n\t\t// - get collision normal by finding point/edge pair with minimum depth\r\n\t\tfunction findNormal(bodyA, bodyB) {\r\n\t\t\tlet vertices = bodyA.vertices;\r\n\t\t\tfor (let i = 0; i < vertices.length; i++) {\r\n\t\t\t\tlet curVertice = vertices[i];\r\n\t\t\t\tlet nextVertice = vertices[(i + 1) % vertices.length];\r\n\t\t\t\tlet curNormal = curVertice.sub(nextVertice).normal().normalize();\r\n\t\t\t\tlet support = bodyB._getSupport(curNormal, curVertice);\r\n\r\n\t\t\t\tif (bodyB.containsPoint(curVertice)) {\r\n\t\t\t\t\tcontacts.push({ vertice: curVertice, body: bodyA });\r\n\t\t\t\t\tnumContacts++;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (support[1] < minDepth && !bodyB.isStatic) {\r\n\t\t\t\t\tminDepth = support[1];\r\n\t\t\t\t\tnormal = curNormal.mult(-1);\r\n\t\t\t\t\tnormalPoint = curVertice.avg(nextVertice);\r\n\r\n\t\t\t\t\tnormalBody = bodyB;\r\n\t\t\t\t\tcontactBody = bodyA;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tfindNormal(bodyA, bodyB);\r\n\t\tfindNormal(bodyB, bodyA);\r\n\r\n\t\tif (contacts.length === 0) {\r\n\t\t\tcontacts.push({ vertice: new vec(bodyA.position), body: bodyA });\r\n\t\t}\r\n\r\n\t\tnormal.mult2(-1);\r\n\t\tWorld.globalVectors.push({ position: normalPoint, vector: new vec(normal) });\r\n\t\tWorld.globalPoints.push(...contacts.map(v => v.vertice));\r\n\r\n\t\tlet pairId = Common.pairCommon(bodyA.id, bodyB.id);\r\n\t\tlet pair = {\r\n\t\t\tbodyA: contactBody,\r\n\t\t\tbodyB: normalBody,\r\n\t\t\tdepth: minDepth,\r\n\t\t\tpenetration: normal.mult(minDepth),\r\n\t\t\tcontacts: contacts,\r\n\t\t\ttotalContacts: numContacts,\r\n\t\t\tnormal: normal,\r\n\t\t\ttangent: normal.normal(),\r\n\r\n\t\t\tid: pairId,\r\n\t\t\tframe: Performance.frame,\r\n\t\t\tstart: World.time,\r\n\t\t}\r\n\r\n\t\tif (World.pairs[pairId]) { // Collision happened last frame, so it's active\r\n\t\t\tpair.start = World.pairs[pairId].start;\r\n\t\t\tbodyA.trigger(\"collisionActive\", pair);\r\n\t\t\tbodyB.trigger(\"collisionActive\", pair);\r\n\t\t}\r\n\t\telse { // No collision between these bodies last frame, so collision just started\r\n\t\t\tbodyA.trigger(\"collisionStart\", pair);\r\n\t\t\tbodyB.trigger(\"collisionStart\", pair);\r\n\t\t\t\r\n\t\t\tbodyA.pairs.push(pairId);\r\n\t\t\tbodyB.pairs.push(pairId);\r\n\t\t}\r\n\r\n\t\tWorld.pairs[pairId] = pair;\r\n\t}\r\n\r\n\t/**\r\n\t * Deletes the collision pair\r\n\t * @param {collisionPair} pair - The pair to delete\r\n\t * @returns {Boolean} If pair was successfully removed, meaning they are no longer colliding\r\n\t */\r\n\tcleansePair(pair) {\r\n\t\tconst { Performance, World } = this;\r\n\t\tif (pair.frame < Performance.frame) {\r\n\t\t\tlet { bodyA, bodyB } = pair;\r\n\r\n\t\t\t// Remove pair\r\n\t\t\tbodyA.pairs.splice(bodyA.pairs.indexOf(pair.id), 1);\r\n\t\t\tbodyB.pairs.splice(bodyB.pairs.indexOf(pair.id), 1);\r\n\t\t\tdelete World.pairs[pair.id];\r\n\r\n\t\t\t// Trigger collisionEnd event\r\n\t\t\tbodyA.trigger(\"collisionEnd\", pair);\r\n\t\t\tbodyB.trigger(\"collisionEnd\", pair);\r\n\r\n\t\t\treturn true;\r\n\t\t}\r\n\t\treturn false;\r\n\t}\r\n\r\n\t/**\r\n\t * Solves new velocities for bodies based on their collision pairs\r\n\t */\r\n\tsolveVelocity = function() {\r\n\t\tlet { pairs } = this.World;\r\n\t\t\r\n\t\tfor (let i in pairs) {\r\n\t\t\tlet pair = pairs[i];\r\n\t\t\tif (!pair || this.cleansePair(pair)) continue;\r\n\r\n\t\t\tlet { bodyA, bodyB, normal, tangent, contacts } = pair;\r\n\t\t\tlet numContacts = contacts.length;\r\n\t\t\tif (numContacts === 0) continue;\r\n\r\n\t\t\twhile (bodyA.parent instanceof RigidBody && bodyA.parent !== bodyA) {\r\n\t\t\t\tbodyA = bodyA.parent;\r\n\t\t\t}\r\n\t\t\twhile (bodyB.parent instanceof RigidBody && bodyB.parent !== bodyB) {\r\n\t\t\t\tbodyB = bodyB.parent;\r\n\t\t\t}\r\n\t\t\tif (bodyA.isSensor || bodyB.isSensor) continue;\r\n\r\n\t\t\tconst restitution = 1 + Math.max(bodyA.restitution, bodyB.restitution);\r\n\t\t\tconst relVel = bodyB.velocity.sub(bodyA.velocity);\r\n\t\t\tconst friction = Math.max(bodyA.friction, bodyB.friction);\r\n\t\t\tconst slop = Math.max(bodyA._slop, bodyB._slop);\r\n\r\n\t\t\tif (relVel.dot(normal) < 0) {\r\n\t\t\t\tcontinue;\r\n\t\t\t}\r\n\r\n\t\t\tlet impulse = new vec(0, 0);\r\n\t\t\tlet angImpulseA = 0;\r\n\t\t\tlet angImpulseB = 0;\r\n\r\n\t\t\tlet totalMass = bodyA.mass + bodyB.mass;\r\n\t\t\tlet shareA = (bodyB.mass / totalMass) || 0;\r\n\t\t\tlet shareB = (bodyA.mass / totalMass) || 0;\r\n\t\t\tlet maxShare = this.maxShare;\r\n\t\t\tshareA = Math.min(maxShare, shareA);\r\n\t\t\tshareB = Math.min(maxShare, shareB);\r\n\t\t\tif (bodyA.isStatic) shareB = 1;\r\n\t\t\tif (bodyB.isStatic) shareA = 1;\r\n\r\n\t\t\tfor (let c = 0; c < numContacts; c++) {\r\n\t\t\t\tconst { vertice } = contacts[c];\r\n\r\n\t\t\t\tconst offsetA = vertice.sub(bodyA.position);\r\n\t\t\t\tconst offsetB = vertice.sub(bodyB.position);\r\n\t\t\t\tconst vpA = bodyA.velocity.add(offsetA.normal().mult(-bodyA.angularVelocity));\r\n\t\t\t\tconst vpB = bodyB.velocity.add(offsetB.normal().mult(-bodyB.angularVelocity));\r\n\t\t\t\tvar relativeVelocity = vpA.sub(vpB);\r\n\t\t\t\tconst normalVelocity = relativeVelocity.abs().sub(slop).mult(relativeVelocity.sign()).dot(normal);\r\n\t\t\t\tconst tangentVelocity = relativeVelocity.dot(tangent);\r\n\r\n\t\t\t\tlet oAcN = offsetA.cross(normal);\r\n\t\t\t\tlet oBcN = offsetB.cross(normal);\r\n\t\t\t\tlet share = 1 / (contacts.length * (bodyA._inverseMass + bodyB._inverseMass + bodyA._inverseInertia * oAcN * oAcN  + bodyB._inverseInertia * oBcN * oBcN));\r\n\r\n\t\t\t\tif (normalVelocity > 0) continue;\r\n\t\t\t\t\r\n\t\t\t\tconst normalImpulse = restitution * normalVelocity * share;\r\n\t\t\t\tconst tangentImpulse = restitution * tangentVelocity * share;\r\n\r\n\t\t\t\tconst curImpulse = normal.mult(normalImpulse).add2(tangent.mult(tangentImpulse * friction));\r\n\t\t\t\timpulse.set(curImpulse);\r\n\t\t\t\tangImpulseA = offsetA.cross(curImpulse) * bodyA._inverseInertia;\r\n\t\t\t\tangImpulseB = offsetB.cross(curImpulse) * bodyB._inverseInertia;\r\n\r\n\t\t\t\tif (!bodyA.isStatic) {\r\n\t\t\t\t\tbodyA.velocity.sub2(impulse.mult(1 / bodyA.mass));\r\n\t\t\t\t\tbodyA.angularVelocity -= angImpulseA / bodyA.mass;\r\n\t\t\t\t}\r\n\t\t\t\tif (!bodyB.isStatic) {\r\n\t\t\t\t\tbodyB.velocity.add2(impulse.mult(1 / bodyB.mass));\r\n\t\t\t\t\tbodyB.angularVelocity += angImpulseB / bodyB.mass;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\t\r\n\t/**\r\n\t * Solves position intersections between bodies based on their collision pairs\r\n\t */\r\n\tsolvePositions = function() {\r\n\t\tconst { World } = this;\r\n\t\tlet { pairs } = World;\r\n\t\t\r\n\t\tfor (let i in pairs) {\r\n\t\t\tlet pair = pairs[i];\r\n\t\t\tif (!pair || this.cleansePair(pair)) continue;\r\n\t\t\tlet { depth, bodyA, bodyB, normal } = pair;\r\n\t\t\t// depth = Math.min(depth, 15);\r\n\t\t\t\r\n\t\t\twhile (bodyA.parent && bodyA.parent !== bodyA) {\r\n\t\t\t\tbodyA = bodyA.parent;\r\n\t\t\t}\r\n\t\t\twhile (bodyB.parent && bodyB.parent !== bodyB) {\r\n\t\t\t\tbodyB = bodyB.parent;\r\n\t\t\t}\r\n\t\t\tif (bodyA.isSensor || bodyB.isSensor) continue;\r\n\t\t\t\r\n\t\t\tif (depth < 1) continue;\r\n\r\n\t\t\tlet impulse = normal.mult(depth - 1);\r\n\t\t\tlet totalMass = bodyA.mass + bodyB.mass;\r\n\t\t\tlet shareA = (bodyB.mass / totalMass) || 0;\r\n\t\t\tlet shareB = (bodyA.mass / totalMass) || 0;\r\n\t\t\tlet maxShare = this.maxShare;\r\n\t\t\tshareA = Math.min(maxShare, shareA);\r\n\t\t\tshareB = Math.min(maxShare, shareB);\r\n\t\t\tif (bodyA.isStatic) shareB = 1;\r\n\t\t\tif (bodyB.isStatic) shareA = 1;\r\n\t\t\tif (bodyA.isStatic || bodyB.isStatic) impulse.mult(0);\r\n\r\n\t\t\tif (!bodyA.isStatic) {\r\n\t\t\t\tlet a = impulse.mult(shareA * 0.95 / bodyA.pairs.length);\r\n\t\t\t\tbodyA.translate(a);\r\n\t\t\t}\r\n\t\t\tif (!bodyB.isStatic) {\r\n\t\t\t\tlet a = impulse.mult(-shareB * 0.95 / bodyB.pairs.length);\r\n\t\t\t\tbodyB.translate(a);\r\n\t\t\t}\r\n\t\t\tpair.depth -= impulse.length;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Solves physics constraints for their new position and velocity\r\n\t * @param {Number} delta - Engine tick duration, in seconds\r\n\t */\r\n\tsolveConstraints = function(delta) {\r\n\t\tdelta *= 1000;\r\n\t\tconst constraints = this.World.constraints;\r\n\t\tconst constraintIterations = this.constraintIterations;\r\n\t\tdelta /= constraintIterations;\r\n\r\n\t\tfor (let step = 0; step < constraintIterations; step++) {\r\n\t\t\tfor (let i = 0; i < constraints.length; i++) {\r\n\t\t\t\tlet constraint = constraints[i];\r\n\t\t\t\tlet { bodyA, bodyB, offsetA, offsetB, stiffness, angularStiffness, length, ignoreSlack } = constraint;\r\n\t\t\t\tlet pointA = bodyA.position.add(offsetA.rotate(bodyA.angle));\r\n\t\t\t\tlet pointB = bodyB.position.add(offsetB.rotate(bodyB.angle));\r\n\r\n\t\t\t\t// constraint velocity solver\r\n\t\t\t\tlet diff = pointA.sub(pointB);\r\n\t\t\t\tlet normal = diff.normalize();\r\n\t\t\t\tlet tangent = normal.normal();\r\n\r\n\t\t\t\tlet totalMass = bodyA.mass + bodyB.mass;\r\n\t\t\t\tlet shareA = (bodyB.mass / totalMass) || 0;\r\n\t\t\t\tlet shareB = (bodyA.mass / totalMass) || 0;\r\n\t\t\t\tlet maxShare = this.maxShare;\r\n\t\t\t\tshareA = Math.min(maxShare, shareA);\r\n\t\t\t\tshareB = Math.min(maxShare, shareB);\r\n\t\t\t\tif (bodyA.isStatic) shareB = 1;\r\n\t\t\t\tif (bodyB.isStatic) shareA = 1;\r\n\r\n\t\t\t\tfunction solveImpulse(vertice, point, body) { // vertice = where the constraint goes to, point = where the constraint is\r\n\t\t\t\t\tlet offset = point.sub(body.position);\r\n\t\t\t\t\tlet offsetLen = offset.length;\r\n\t\t\t\t\tif (offsetLen > length * 3) {\r\n\t\t\t\t\t\toffset.mult2(length / offsetLen);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tconst vp1 = body.velocity.add(offset.normal().mult(-body.angularVelocity));\r\n\t\t\t\t\tconst vp2 = vertice.sub(point).mult(stiffness * 30);\r\n\t\t\t\t\tif (ignoreSlack && diff.length < length * (1 + stiffness)) { // idk how to get this to work\r\n\t\t\t\t\t\tvp1.mult2(0);\r\n\t\t\t\t\t\tvp2.mult2(0);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tconst relativeVelocity = vp1.sub(vp2);\r\n\t\t\t\t\tconst normalVelocity = relativeVelocity.dot(normal);\r\n\t\t\t\t\tconst tangentVelocity = relativeVelocity.dot(tangent);\r\n\t\t\t\t\tlet tangentImpulse = tangentVelocity;\r\n\t\t\t\t\t\r\n\t\t\t\t\tlet normalImpulse = (stiffness) * normalVelocity; // min is to prevent breakage\r\n\t\t\t\t\tnormalImpulse = Math.min(Math.abs(normalImpulse), 300) * Math.sign(normalImpulse);\r\n\t\t\t\t\tlet curImpulse = normal.mult(normalImpulse).add2(tangent.mult(tangentImpulse * angularStiffness));\r\n\r\n\t\t\t\t\treturn {\r\n\t\t\t\t\t\tangularImpulse: offset.cross(curImpulse) * body._inverseInertia / 2,\r\n\t\t\t\t\t\tnormalImpulse: curImpulse.mult(0.5),\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\tlet impulseDiff = pointA.sub(pointB).normalize().mult(length);\r\n\t\t\t\tlet impulsePtA = bodyA.isStatic ? pointA : pointB.add(impulseDiff);\r\n\t\t\t\tlet impulsePtB = bodyB.isStatic ? pointB : pointA.sub(impulseDiff);\r\n\r\n\t\t\t\tlet { angularImpulse: angImpulseA, normalImpulse: impulseA } = solveImpulse(impulsePtA, pointA, bodyA);\r\n\t\t\t\tlet { angularImpulse: angImpulseB, normalImpulse: impulseB } = solveImpulse(impulsePtB, pointB, bodyB);\r\n\t\t\t\t\r\n\t\t\t\tif (!bodyA.isStatic) {\r\n\t\t\t\t\tbodyA.velocity.sub2(impulseA.mult(shareA * delta));\r\n\t\t\t\t\tbodyA.angularVelocity -= angImpulseA * shareA * delta;\r\n\t\t\t\t}\r\n\t\t\t\tif (!bodyB.isStatic) {\r\n\t\t\t\t\tbodyB.velocity.sub2(impulseB.mult(shareB * delta));\r\n\t\t\t\t\tbodyB.angularVelocity -= angImpulseB * shareB * delta;\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// constraint position solver\r\n\t\t\t\t// let nextLength = pointA.sub(pointB).length + (length - pointA.sub(pointB).length) * stiffness;\r\n\t\t\t\t// let changeA = nextLength - impulsePtB.sub(bodyA.position).length;\r\n\t\t\t\t// changeA = Math.min(50, Math.abs(changeA)) * Math.sign(changeA);\r\n\t\t\t\t// let changeB = nextLength - impulsePtA.sub(bodyB.position).length;\r\n\t\t\t\t// changeB = Math.min(50, Math.abs(changeB)) * Math.sign(changeB);\r\n\r\n\t\t\t\t// bodyA.translate(normal.mult((changeA) * shareA * delta * 0.05));\r\n\t\t\t\t// bodyB.translate(normal.mult((changeB) * shareB * delta * 0.05));\r\n\r\n\t\t\t\tconstraint.updateBounds();\r\n\t\t\t}\r\n\r\n\t\t}\r\n\t}\r\n};\r\n","const vec = require(\"../geometry/vec.js\");\r\nconst Node = require(\"../node/Node.js\");\r\nconst Common = require(\"../core/Common.js\");\r\nconst decomp = require(\"../lib/poly-decomp.js\");\r\nconst PolygonRender = require(\"../render/PolygonRender.js\");\r\nconst Sprite = require(\"../render/Sprite.js\");\r\nconst Bezier = require(\"../geometry/Bezier.js\");\r\n\r\nmodule.exports = class RigidBody extends Node {\r\n\tstatic defaultOptions = { // not used, but consistent with other classes for documentation\r\n\t\tmass: 1,\r\n\t\trestitution: 0.5,\r\n\t\tfrictionAir: 0.05,\r\n\t\tfrictionAngular: 0.01,\r\n\t\tfriction: 0.01,\r\n\t\tround: 0,\r\n\t\r\n\t\tisStatic: false,\r\n\t\tisSensor: false,\r\n\t\thasCollisions: true,\r\n\t\tcollisionFilter: {\r\n\t\t\tlayer: 0xFFFFFF,\r\n\t\t\tmask: 0xFFFFFF,\r\n\t\t},\r\n\t}\r\n\tstatic roundVertices(vertices, round, dx = 40) {\r\n\t\tlet newVertices = [];\r\n\t\tlet verticesLength = vertices.length;\r\n\t\tfor (let i = 0; i < verticesLength; i++) {\r\n\t\t\tlet prev = vertices[(i - 1 + verticesLength) % verticesLength];\t\r\n\t\t\tlet cur = vertices[i];\t\r\n\t\t\tlet next = vertices[(i + 1) % verticesLength];\t\r\n\r\n\t\t\t// get vectors\r\n\t\t\tlet prevToCur = cur.sub(prev);\r\n\t\t\tlet curToNext = next.sub(cur);\r\n\t\t\tlet prevCurNormalized = prevToCur.normalize();\r\n\t\t\tlet curNextNormalized = curToNext.normalize();\r\n\r\n\t\t\t// get round amount\r\n\t\t\tlet prevRound = Math.min(round, prevToCur.length / 2);\r\n\t\t\tlet nextRound = Math.min(round, curToNext.length / 2);\r\n\t\t\tlet curRound = Math.min(prevRound, nextRound);\r\n\r\n\t\t\tlet start = prevCurNormalized.mult(-curRound).add(cur);\r\n\t\t\tlet cp1 = prevCurNormalized.mult(-curRound * 0.45).add(cur);\r\n\t\t\tlet cp2 = curNextNormalized.mult(curRound *  0.45).add(cur);\r\n\t\t\tlet end = curNextNormalized.mult(curRound).add(cur);\r\n\t\t\tlet bezier = new Bezier(start, cp1, cp2, end);\r\n\t\t\tfor (let i = 0; i < bezier.length;) {\r\n\t\t\t\tnewVertices.push(bezier.get(i));\r\n\t\t\t\ti += dx;\r\n\t\t\t}\r\n\t\t\tnewVertices.push(end);\r\n\t\t}\r\n\t\treturn newVertices;\r\n\t}\r\n\r\n\t//\r\n\t// Public user options\r\n\t//\r\n\tvertices = [];\r\n\r\n\tmass = 1;\r\n\trestitution = 0.5;\r\n\tfrictionAir = 0.05;\r\n\tfrictionAngular = 0.01;\r\n\tfriction = 0.01;\r\n\tround = 0;\r\n\r\n\tisStatic = false;\r\n\tisSensor = false;\r\n\thasCollisions = true;\r\n\tcollisionFilter = {\r\n\t\tlayer: 0xFFFFFF,\r\n\t\tmask: 0xFFFFFF,\r\n\t}\r\n\r\n\t/**\r\n\t * Creates a new RigidBody\r\n\t * @param {Array} vertices Array of `vec` representing the body's vertices\r\n\t * @param {vec} position - The position of the body\r\n\t * @param {Engine} Engine - The engine the body should be simulated in\r\n\t * @param {Object} options - RigidBody options, see documentation for options\r\n\t */\r\n\tconstructor(Engine, vertices, position, options = {}) {\r\n\t\tsuper();\r\n\t\tif (!this.Engine) this.Engine = Engine;\r\n\t\t\r\n\t\t// Shallow copy World\r\n\t\tthis.World = this.Engine.World;\r\n\t\tdelete options.World;\r\n\r\n\t\t// Shallow copy render\r\n\t\tif (options.render) {\r\n\t\t\tthis.addChild(options.render);\r\n\t\t\tdelete options.render;\r\n\t\t}\r\n\r\n\t\t// Merge collision filters\r\n\t\tif (typeof options.collisionFilter === \"object\") Common.merge(this.collisionFilter, options.collisionFilter, 1);\r\n\r\n\t\t// Merge options with body\r\n\t\tCommon.merge(this, options, 1);\r\n\t\t\r\n\t\t// Parse collision filter properties\r\n\t\tfor (let filterType in [\"layer\", \"mask\"]) {\r\n\t\t\tif (typeof this.collisionFilter[filterType] === \"string\") {\r\n\t\t\t\tthis.collisionFilter[filterType] = parseInt(this.collisionFilter[filterType], 2);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// Convert vertices to vec\r\n\t\tthis.vertices = vertices.map(v => new vec(v));\r\n\t\t\r\n\t\t// round vertices\r\n\t\tif (options.round && options.round > 0) {\r\n\t\t\tthis.vertices = RigidBody.roundVertices(this.vertices, this.round, this.roundQuality);\r\n\t\t}\r\n\r\n\t\t// Reset vertices so convex check works properly\r\n\t\tthis.#removeDuplicateVertices();\r\n\t\tthis._resetVertices(false);\r\n\r\n\t\t// Fully reset vertices\r\n\t\tthis._resetVertices();\r\n\t\tthis._updateInertia();\r\n\r\n\t\t// Set angle from options\r\n\t\tif (options.angle) {\r\n\t\t\tthis.angle = 0;\r\n\t\t\tthis.setAngle(-options.angle);\r\n\t\t}\r\n\t\tthis.setPosition(position);\r\n\t}\r\n\t\r\n\t//\r\n\t// Public user methods\r\n\t//\r\n\t/**\r\n\t * Adds the body to its world\r\n\t * @returns {RigidBody} `this`\r\n\t */\r\n\tadd() {\r\n\t\tlet World = this.Engine.World;\r\n\t\tif (!this.added) {\r\n\t\t\tsuper.add();\r\n\t\t\tWorld.addChild(this);\r\n\t\t}\r\n\t\treturn this;\r\n\t}\r\n\r\n\t/**\r\n\t * Removes the body from its world\r\n\t * @returns {RigidBody} `this`\r\n\t */\r\n\tdelete() {\r\n\t\tlet World = this.Engine.World;\r\n\t\tif (this.added) {\r\n\t\t\tsuper.delete();\r\n\t\t\tWorld.removeChild(this);\r\n\r\n\t\t\tfor (let i = 0; i < this.pairs.length; i++) {\r\n\t\t\t\tthis.Engine.cleansePair(this.pairs[i]);\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn this;\r\n\t}\r\n\r\n\t/**\r\n\t * Adds a polygon render to body\r\n\t * @param {PIXI Container} container - Container polygon render is added to\r\n\t * @param {Object} options - Options for polygon render, see documentation for possible options\r\n\t * @returns {RigidBody} `this`\r\n\t */\r\n\taddPolygonRender(container, options) {\r\n\t\tlet render = new PolygonRender({\r\n\t\t\tcontainer: container,\r\n\t\t\tposition: new vec(this.position),\r\n\t\t\tvertices: this.vertices,\r\n\t\t\t\r\n\t\t\t...options\r\n\t\t});\r\n\t\tif (this.added) render.add();\r\n\t\tthis.addChild(render);\r\n\t\t\r\n\t\treturn this;\r\n\t}\r\n\r\n\t/**\r\n\t * Adds a sprite to body\r\n\t * @param {PIXI Container} container - Container polygon render is added to\r\n\t * @param {Object} options - Sprite options, see documentation for possible options\r\n\t * @returns {RigidBody} `this`\r\n\t */\r\n\taddSprite(container, options) {\r\n\t\tlet render = new Sprite({\r\n\t\t\tcontainer: container,\r\n\t\t\tposition: new vec(this.position),\r\n\t\t\t\r\n\t\t\t...options\r\n\t\t});\r\n\t\tif (this.added) render.add();\r\n\t\tthis.addChild(render);\r\n\t\t\r\n\t\treturn this;\r\n\t}\r\n\t\r\n\t/**\r\n\t * Changes if the body is static\r\n\t * @param {Boolean} isStatic - If the body should be static\r\n\t * @returns {void}\r\n\t */\r\n\tsetStatic(isStatic) {\r\n\t\tlet { dynamicGrid, staticGrid } = this.Engine.World;\r\n\t\tlet lastStatic = this.isStatic;\r\n\t\tif (isStatic === lastStatic) return;\r\n\t\t\r\n\t\tthis.isStatic = isStatic;\r\n\r\n\t\tif (this.hasCollisions && !this.removed) {\r\n\t\t\tif (lastStatic) {\r\n\t\t\t\tstaticGrid.removeBody(this);\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tdynamicGrid.removeBody(this);\r\n\t\t\t}\r\n\r\n\t\t\tif (isStatic) {\r\n\t\t\t\tstaticGrid.addBody(this);\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tdynamicGrid.addBody(this);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Changes if the body can collide with other bodies\r\n\t * @param {Number} hasCollisions - Whether the body can collide with other bodies\r\n\t * @returns {void}\r\n\t */\r\n\tsetCollisions(hasCollisions) {\r\n\t\tlet { dynamicGrid, staticGrid } = this.Engine.World;\r\n\t\tif (hasCollisions === this.hasCollisions) return;\r\n\r\n\t\tthis.hasCollisions = hasCollisions;\r\n\r\n\t\tif (this.hasCollisions) {\r\n\t\t\tif (this.isStatic) {\r\n\t\t\t\tstaticGrid.addBody(this);\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tdynamicGrid.addBody(this);\r\n\t\t\t}\r\n\t\t}\r\n\t\telse {\r\n\t\t\tif (this.isStatic) {\r\n\t\t\t\tstaticGrid.removeBody(this);\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tdynamicGrid.removeBody(this);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Finds if a point is inside the body\r\n\t * @param {vec} point The point to query\r\n\t * @returns {Boolean} If the point is inside the body's vertices\r\n\t */\r\n\tcontainsPoint(point) {\r\n\t\tlet vertices = this.vertices;\r\n\t\tfor (let i = 0; i < vertices.length; i++) {\r\n\t\t\tlet curVertice = vertices[i];\r\n\t\t\tlet nextVertice = vertices[(i + 1) % vertices.length];\r\n\t\t\t\r\n\t\t\tif ((point.x - curVertice.x) * (nextVertice.y - curVertice.y) + (point.y - curVertice.y) * (curVertice.x - nextVertice.x) >= 0) {\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn true;\r\n\t}\r\n\r\n\t/**\r\n\t * Instantly sets body's position to `position`\r\n\t * @param {vec} position - The position the body should be\r\n\t * @param {Boolean} _ignoreChildren - If the body's children should be affected\r\n\t * @example\r\n\t * body.setPosition(new vec(100, 100)); // Sets the body's position to (100, 100) \r\n\t * @returns {void}\r\n\t */\r\n\tsetPosition(position, _ignoreChildren = false) {\r\n\t\tlet delta = position.sub(this.position);\r\n\t\tthis.translate(delta, true, _ignoreChildren);\r\n\t}\r\n\t\r\n\t/**\r\n\t * Shifts body's position by delta\r\n\t * @param {vec} delta - Distance the body should be shifted\r\n\t * @param {Boolean} affectPosition - If the body's position should be affected\r\n\t * @param {Boolean} ignoreChildren - If the body's children should be shifted as well\r\n\t * @returns {void}\r\n\t */\r\n\ttranslate(delta, affectPosition = true, ignoreChildren = false) {\r\n\t\tif (delta.isNaN()) return;\r\n\t\tlet vertices = this.vertices;\r\n\t\tfor (let i = 0; i < vertices.length; i++) {\r\n\t\t\tvertices[i].add2(delta);\r\n\t\t}\r\n\r\n\t\tif (affectPosition) {\r\n\t\t\tthis.position.add2(delta);\r\n\t\t}\r\n\t\tthis.#updateBounds();\r\n\r\n\t\tlet tree = this.Engine.World.dynamicGrid;\r\n\t\tif (this._Grids && this._Grids[tree.id]) {\r\n\t\t\ttree.updateBody(this);\r\n\t\t}\r\n\r\n\t\tif (!ignoreChildren) {\r\n\t\t\tlet children = this.children;\r\n\t\t\tfor (let child of children) {\r\n\t\t\t\tchild.translate(delta, affectPosition);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Rotates the body to `angle` - Absolute\r\n\t * @param {Number} angle - Angle body should be in radians\r\n\t * @example\r\n\t * body.setAngle(Math.PI); // Sets the body's angle to Pi radians, or 180 degrees \r\n\t * @returns {void}\r\n\t */\r\n\tsetAngle(angle) {\r\n\t\tif (isNaN(angle)) return;\r\n\t\tif (angle !== this.angle) {\r\n\t\t\tlet delta = Common.angleDiff(angle, this.angle);\r\n\t\t\t\r\n\t\t\tthis.translateAngle(delta);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Rotates the body by `angle`- Relative\r\n\t * @param {Number} angle - The amount the body should be rotated, in radians\r\n\t * @param {Boolean} silent - If the body's angle should be affected\r\n\t * @returns {void}\r\n\t */\r\n\ttranslateAngle(angle, silent = false) {\r\n\t\tif (isNaN(angle)) return;\r\n\t\tlet vertices = this.vertices;\r\n\t\tlet position = this.position;\r\n\t\tlet rotationPoint = this.rotationPoint.rotate(this.angle + angle);\r\n\t\tif (this.parent) {\r\n\t\t\trotationPoint.add2(this.position.sub(this.parent.position));\r\n\t\t}\r\n\t\tlet sin = Math.sin(angle);\r\n\t\tlet cos = Math.cos(angle);\r\n\r\n\t\tfor (let i = vertices.length; i-- > 0;) {\r\n\t\t\tlet vert = vertices[i];\r\n\t\t\tlet dist = vert.sub(position);\r\n\t\t\tvert.x = position.x + (dist.x * cos - dist.y * sin);\r\n\t\t\tvert.y = position.y + (dist.x * sin + dist.y * cos);\r\n\t\t}\r\n\r\n\t\tlet posOffset = rotationPoint.sub(rotationPoint.rotate(angle));\r\n\t\tthis.translate(posOffset);\r\n\t\tif (!silent) {\r\n\t\t\tthis.angle += angle;\r\n\t\t}\r\n\r\n\t\tthis.#updateBounds();\r\n\t\tthis.#updateAxes();\r\n\r\n\t\tfor (let child of this.children) {\r\n\t\t\tchild.translateAngle?.(angle, silent);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Instantly changes the body's velocity to a specific value\r\n\t * @param {vec} velocity - The velocity the body should have\r\n\t * @returns {void}\r\n\t */\r\n\tsetVelocity(velocity) {\r\n\t\tif (velocity.isNaN()) {\r\n\t\t\tconsole.error(velocity);\r\n\t\t\tthrow new Error(\"Invalid velocity\");\r\n\t\t}\r\n\t\tif (this.isStatic) return;\r\n\t\tthis.velocity.set(velocity);\r\n\t}\r\n\r\n\t/**\r\n\t * Instantly changes the body's angular velocity to a specific value\r\n\t * @param {vec} velocity - The angular velocity the body should have\r\n\t * @returns {void}\r\n\t */\r\n\tsetAngularVelocity(velocity) {\r\n\t\tif (velocity.isNaN()) {\r\n\t\t\tconsole.error(velocity);\r\n\t\t\tthrow new Error(\"Invalid angular velocity\");\r\n\t\t}\r\n\t\tif (this.isStatic) return;\r\n\t\tthis.angularVelocity = velocity;\r\n\t}\r\n\r\n\t/**\r\n\t * Applies a force to the body, ignoring mass. The body's velocity changes by force * delta\r\n\t * @param {vec} force - The amount of force to be applied, in px / sec^2\r\n\t * @param {Number} delta - The amount of time that the force should be applied in seconds, set to 1 if only applying in one instant\r\n\t * @returns {void}\r\n\t */\r\n\tapplyForce(force, delta = Engine.delta) { // set delta to 1 if you want to apply a force for only 1 frame\r\n\t\tif (force.isNaN()) return;\r\n\t\tif (this.isStatic) return;\r\n\t\tthis.force.add2(force.mult(delta));\r\n\t}\r\n\t\r\n\t/**\r\n\t * Applies a rotational force (torque) to the body, ignoring mass. The body's angular velocity changes by force * delta\r\n\t * @param {Number} force - The amount of torque to be applied, in radians / sec^2\r\n\t * @param {Number} delta - The amount of time the force should be applied in seconds, set to 1 if only applying instantaneous force\r\n\t * @returns \r\n\t */\r\n\tapplyTorque(force, delta = Engine.delta) { // set delta to 1 if you want to apply a force for only 1 frame\r\n\t\tif (isNaN(force)) return;\r\n\t\tthis.torque += force * delta;\r\n\t}\r\n\r\n\t// \r\n\t// Private engine variables\r\n\t// \r\n\tEngine = null;\r\n\tparent = null;\r\n\r\n\tposition = new vec(0, 0);\r\n\tvelocity = new vec(0, 0);\r\n\tangle = 0;\r\n\tangularVelocity = 0;\r\n\t_last = {\r\n\t\tvelocity: new vec(0, 0),\r\n\t\tangularVelocity: 0,\r\n\t};\r\n\t\r\n\tforce = new vec(0, 0);\r\n\timpulse = new vec(0, 0);\r\n\tcenter = new vec(0, 0);\r\n\ttorque = 0;\r\n\t\r\n\taxes = [];\r\n\trotationPoint = new vec(0, 0);\r\n\r\n\t_inverseMass = 1;\r\n\tinertia = 1;\r\n\t_inverseInertia = 0.000015;\t\r\n\r\n\tpairs = [];\r\n\t_lastSeparations = {};\r\n\t_slop = 0.001;\r\n\r\n\tbounds = {\r\n\t\tmin: new vec({ x: 0, y: 0 }),\r\n\t\tmax: new vec({ x: 1, y: 1 })\r\n\t}\r\n\r\n\t#events = {\r\n\t\tcollisionStart: [],\r\n\t\tcollisionActive: [],\r\n\t\tcollisionEnd: [],\r\n\t\tbeforeUpdate: [], // use to apply forces to current body\r\n\t\tduringUpdate: [], // use to clear forces from current body\r\n\t\tdelete: [],\r\n\t\tadd: [],\r\n\t}\r\n\r\n\t// \r\n\t// Private engine methods\r\n\t// \r\n\t/**\r\n\t * Prepares the body \r\n\t * @param {Number} delta - Engine tick duration, in seconds\r\n\t * @returns {void}\r\n\t */\r\n\t_preUpdate(delta) {\r\n\t\tthis.trigger(\"beforeUpdate\");\r\n\r\n\t\tif (this.isStatic) return;\r\n\r\n\t\t// apply forces\r\n\t\tthis.velocity.add2(this.force).add2(this.Engine.World.gravity.mult(delta));\r\n\t\tthis.angularVelocity += this.torque;\r\n\r\n\t\t// clear forces\r\n\t\tthis.force.x = 0;\r\n\t\tthis.force.y = 0;\r\n\t\tthis.torque = 0;\r\n\t}\r\n\t/**\r\n\t * Updates this body's velocity, position, and grid\r\n\t * @param {Number} delta - Engine tick duration, in seconds\r\n\t * @returns {void}\r\n\t */\r\n\t_update(delta) {\r\n\t\tthis.trigger(\"duringUpdate\");\r\n\r\n\t\tif (this.isStatic) return;\r\n\r\n\t\tconst timescale = delta;\r\n\t\tlet { velocity: lastVelocity, angularVelocity: lastAngularVelocity } = this._last;\r\n\r\n\t\tlet frictionAir = (1 - this.frictionAir) ** timescale;\r\n\t\tlet frictionAngular = (1 - this.frictionAngular) ** timescale;\r\n\r\n\t\tif (isNaN(timescale) || this.velocity.isNaN() || isNaN(frictionAir + frictionAngular)) {\r\n\t\t\treturn;\r\n\t\t}\r\n\t\t\r\n\t\tthis.velocity.mult2(frictionAir);\r\n\t\tif (this.velocity.x !== 0 || this.velocity.y !== 0){\r\n\t\t\tthis.translate(this.velocity.add(lastVelocity).mult(timescale / 2)); // trapezoidal rule to take into account acceleration\r\n\t\t\t// body.translate(body.velocity.mult(timescale)); // potentially more stable, but less accurate\r\n\t\t}\r\n\t\tthis._last.velocity.set(this.velocity);\r\n\r\n\t\tthis.angularVelocity *= frictionAngular;\r\n\t\tif (this.angularVelocity){\r\n\t\t\tthis.translateAngle((this.angularVelocity + lastAngularVelocity) * timescale / 2); // trapezoidal rule to take into account acceleration\r\n\t\t\t// body.translateAngle((body.angularVelocity) * timescale); // potentially more stable, but less accurate\r\n\t\t}\r\n\t\tthis._last.angularVelocity = this.angularVelocity;\r\n\t\t\r\n\t\tthis.#updateBounds();\r\n\r\n\t\tif (this.hasCollisions) {\r\n\t\t\tthis.Engine.World.dynamicGrid.updateBody(this);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Calculates the area of the body if it is convex\r\n\t * @returns {Number} The area of the body\r\n\t */\r\n\t#getArea() {\r\n\t\tlet area = 0;\r\n\t\tlet vertices = this.vertices;\r\n\t\tlet len = vertices.length;\r\n\t\tfor (let i = 0; i < len; i++) {\r\n\t\t\tarea += vertices[i].cross(vertices[(i + 1) % len]);\r\n\t\t}\r\n\t\treturn area * 0.5;\r\n\t}\r\n\r\n\t/**\r\n\t * Calculates inertia from the body's vertices\r\n\t * @returns {Number} The body's inertia\r\n\t */\r\n\t#getInertia() {\r\n\t\tconst { vertices, mass } = this;\r\n\t\t\r\n\t\tlet numerator = 0;\r\n\t\tlet denominator = 0;\r\n\r\n\t\tfor (var i = 0; i < vertices.length; i++) {\r\n\t\t\tlet j = (i + 1) % vertices.length;\r\n\t\t\tlet cross = Math.abs(vertices[j].cross(vertices[i]));\r\n\t\t\tnumerator += cross * (vertices[j].dot(vertices[j]) + vertices[j].dot(vertices[i]) + vertices[i].dot(vertices[i]));\r\n\t\t\tdenominator += cross;\r\n\t\t}\r\n\r\n\t\treturn (mass / 6) * (numerator / denominator);\r\n\t}\r\n\t/**\r\n\t * Sets the inertia of the body to what's calculated in `#getInertia()` if the body is not static\r\n\t * @returns {void}\r\n\t */\r\n\t_updateInertia() {\r\n\t\tif (this.isStatic) {\r\n\t\t\tthis.mass = Infinity;\r\n\t\t\tthis._inverseMass = 0;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tthis.inertia = this.#getInertia();\r\n\t\t\tthis._inverseInertia = 1 / this.inertia;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Removes overlapping vertices\r\n\t * @param {Number} minDist - Minimum distance when points are considered the same\r\n\t * @returns {void}\r\n\t */\r\n\t#removeDuplicateVertices(minDist = 1) { // remove vertices that are the same\r\n\t\tlet vertices = this.vertices;\r\n\t\tfor (let i = 0; i < vertices.length; i++) {\r\n\t\t\tlet curVert = vertices[i];\r\n\t\t\t\r\n\t\t\tfor (let j = 0; j < vertices.length; j++) {\r\n\t\t\t\tif (j === i) continue;\r\n\t\t\t\tlet nextVert = vertices[j];\r\n\t\t\t\tlet dist = curVert.sub(nextVert);\r\n\r\n\t\t\t\tif (Math.abs(dist.x) + Math.abs(dist.y) < minDist) { // just use manhattan dist because it doesn't really matter\r\n\t\t\t\t\tvertices.splice(i, 1);\r\n\t\t\t\t\ti--;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Determines if the body is convex\r\n\t * @returns {Boolean} If the body is convex\r\n\t */\r\n\t#isConvex() {\r\n\t\tlet vertices = this.vertices;\r\n\t\tlet len = vertices.length;\r\n\r\n\t\tlet last = vertices[0].sub(vertices[1]);\r\n\t\tlet sign = 0;\r\n\t\tfor (let i = 1; i < len; i++) {\r\n\t\t\tlet cur = vertices[i].sub(vertices[(i + 1) % len]);\r\n\t\t\tlet curSign = Math.sign(cur.cross(last));\r\n\r\n\t\t\tif (sign === 0) {\r\n\t\t\t\tsign = curSign;\r\n\t\t\t}\r\n\t\t\telse if (curSign !== 0) {\r\n\t\t\t\tif (sign !== curSign) {\r\n\t\t\t\t\treturn false;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tlast = cur;\r\n\t\t}\r\n\r\n\t\treturn true;\r\n\t}\r\n\r\n\t/**\r\n\t * Decomposes a concave body into convex children\r\n\t * @returns {void}\r\n\t */\r\n\t#makeConvex() {\r\n\t\tif (!this.#isConvex()) {\r\n\t\t\tlet added = this.added;\r\n\t\t\tthis.delete();\r\n\t\t\t\r\n\t\t\tlet { vertices, position } = this;\r\n\t\t\tthis.children = [];\r\n\t\t\tlet verts = vertices.map(v => [v.x, v.y]);\r\n\t\t\tdecomp.removeCollinearPoints(verts, 0.4);\r\n\t\t\tlet concaveVertices = decomp.quickDecomp(verts);\r\n\t\t\tlet parentCenter = this.#getCenterOfMass();\r\n\r\n\t\t\tfor (let i = 0; i < concaveVertices.length; i++) {\r\n\t\t\t\tlet vertices = concaveVertices[i].map(v => new vec(v[0], v[1]));\r\n\t\t\t\tlet center = Common.getCenterOfMass(vertices);\r\n\t\t\t\tlet body = new FromVertices(vertices, position.add(center).sub(parentCenter));\r\n\t\t\t\tbody.delete();\r\n\t\t\t\tbody.parent = this;\r\n\t\t\t\tthis.addChild(body);\r\n\t\t\t}\r\n\r\n\t\t\tif (added) {\r\n\t\t\t\tthis.add();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t#getCenterOfMass() {\r\n\t\tlet center = Common.getCenterOfMass(this.vertices);\r\n\t\tthis.center.set(center);\r\n\t\treturn center;\r\n\t}\r\n\r\n\t/**\r\n\t * Calculates the body's axes from its vertices\r\n\t */\r\n\t#updateAxes() {\r\n\t\tlet verts = this.vertices;\r\n\t\tlet axes = [];\r\n\r\n\t\tfor (let i = 0; i < verts.length; i++) {\r\n\t\t\tlet curVert = verts[i];\r\n\t\t\tlet nextVert = verts[(i + 1) % verts.length];\r\n\r\n\t\t\taxes.push(nextVert.sub(curVert));\r\n\t\t}\r\n\t\tfor (let i = 0; i < axes.length; i++) {\r\n\t\t\taxes[i] = axes[i].normal().normalize2();\r\n\t\t}\r\n\r\n\t\tthis._axes = axes;\r\n\t}\r\n\r\n\t/**\r\n\t * Shifts vertices so their center is at the body's position \r\n\t */\r\n\t#recenterVertices() {\r\n\t\tlet center = this.#getCenterOfMass();\r\n\t\tlet position = this.position;\r\n\t\tcenter.sub2(position);\r\n\t\t\r\n\t\tfor (let i = 0; i < this.vertices.length; i++) {\r\n\t\t\tthis.vertices[i].sub2(center);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Finds the minimum bounds that enclose the body\r\n\t */\r\n\t#updateBounds() {\r\n\t\tconst vertices = this.vertices;\r\n\t\tlet minX = Infinity, minY = Infinity;\r\n\t\tlet maxX = -Infinity, maxY = -Infinity;\r\n\r\n\t\tfor (let i = 0; i < vertices.length; i++) {\r\n\t\t\tlet v = vertices[i];\r\n\r\n\t\t\tif (v.x < minX) minX = v.x;\r\n\t\t\tif (v.x > maxX) maxX = v.x;\r\n\t\t\tif (v.y < minY) minY = v.y;\r\n\t\t\tif (v.y > maxY) maxY = v.y;\r\n\t\t}\r\n\r\n\t\tthis.bounds.min.x = minX;\r\n\t\tthis.bounds.min.y = minY;\r\n\t\tthis.bounds.max.x = maxX;\r\n\t\tthis.bounds.max.y = maxY;\r\n\t}\r\n\r\n\t/**\r\n\t * Ensures vertices are counterclockwise winding and centered, and updates the area, bounding box, and the axes\r\n\t * @param {Number} forceCCW - If vertices should be forced to be counterclockwise winding by sorting their angles from the center\r\n\t */\r\n\t_resetVertices(forceCCW = false) {\r\n\t\tthis.#makeCCW(forceCCW);\r\n\t\tthis.area = this.#getArea();\r\n\t\tthis.#recenterVertices();\r\n\t\tthis.#updateBounds();\r\n\t\tthis.#updateAxes();\r\n\t}\r\n\r\n\t/**\r\n\t * Tries to ensure the body's vertices are counterclockwise winding, by default by comparing the angles of the first 2 vertices and reversing the vertice array if they're clockwise\r\n\t * @param {Boolean} force - If all vertices should be completely reordered using their angle from the center \r\n\t */\r\n\t#makeCCW(force = false) { // makes vertices go counterclockwise if they're clockwise\r\n\t\tif (force) { // reorders vertices by angle from center - can change order of vertices\r\n\t\t\tlet vertices = this.vertices;\r\n\t\t\tlet center = this.position;\r\n\t\t\tlet mapped = vertices.map(v => [v, v.sub(center).angle]);\r\n\t\t\tmapped.sort((a, b) => Common.angleDiff(a[1], b[1]));\r\n\t\t\tthis.vertices = mapped.map(v => v[0]);\r\n\t\t}\r\n\t\telse { // reverses vertices if the 1st and 2nd are going wrong direction - never changes order of vertices\r\n\t\t\tlet vertices = this.vertices;\r\n\t\t\tlet center = this.position;\r\n\t\r\n\t\t\tlet mapped = vertices.map(v => v.sub(center).angle);\r\n\t\t\tif (Common.angleDiff(mapped[0], mapped[1]) > 0) {\r\n\t\t\t\tthis.vertices.reverse();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Finds the vertice farthest in a direction\r\n\t * @param {vec} vector - Normalized direction to find the support point\r\n\t * @param {vec} position - Position to base support on\r\n\t * @returns {Array} \r\n\t */\r\n\t_getSupport(vector, position = this.position) {\r\n\t\tlet vertices = this.vertices;\r\n\t\tlet bestDist = 0;\r\n\t\tlet bestVert;\r\n\t\tfor (let i = 0; i < vertices.length; i++) {\r\n\t\t\tlet dist = vector.dot(vertices[i].sub(position));\r\n\r\n\t\t\tif (dist > bestDist) {\r\n\t\t\t\tbestDist = dist;\r\n\t\t\t\tbestVert = i;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn [ bestVert, bestDist ];\r\n\t}\r\n}\r\n","const vec = require(\"../geometry/vec.js\");\r\n\r\nmodule.exports = class Camera {\r\n\tposition = new vec(0, 0);\r\n\tfov = 2000;\r\n\ttranslation = new vec(0, 0);\r\n\tscale = 1;\r\n\tboundSize = 1000;\r\n\r\n\tconstructor(fov = 2000, boundSize = 1000) {\r\n\t\tthis.fov = fov;\r\n\t\tthis.boundSize = boundSize;\r\n\t}\r\n};\r\n","module.exports = class DebugRender {\r\n\t// - Debug rendering\r\n\tcanvas = null;\r\n\tctx = null;\r\n\tenabled = {\r\n\t\tcollisions: false,\r\n\t\tboundingBox: false,\r\n\t\tvertices: false,\r\n\t\tcenters: false,\r\n\t\tbroadphase: false,\r\n\t}\r\n\r\n\tconstructor(Game) {\r\n\t\tthis.Game = Game;\r\n\r\n\t\tlet scale = devicePixelRatio ?? 1;\r\n\t\tlet canvas = this.canvas = document.createElement(\"canvas\");\r\n\t\tthis.ctx = canvas.getContext(\"2d\");\r\n\t\tcanvas.style.position = \"absolute\";\r\n\t\tcanvas.style.zIndex = 1;\r\n\t\tcanvas.style.top =  \"0px\";\r\n\t\tcanvas.style.left = \"0px\";\r\n\t\tcanvas.width  = scale * window.innerWidth;\r\n\t\tcanvas.height = scale * window.innerHeight;\r\n\t\tcanvas.style.background = \"transparent\";\r\n\t\tcanvas.style.pointerEvents = \"none\";\r\n\t\tcanvas.style.transformOrigin = \"top left\";\r\n\t\tcanvas.style.transform = `scale(${1 / scale}, ${1 / scale})`;\r\n\t\tdocument.body.appendChild(canvas);\r\n\r\n\t\tGame.Render.app.renderer.on(\"resize\", (width, height) => {\r\n\t\t\tlet scale = devicePixelRatio ?? 1;\r\n\t\t\tcanvas.width  = width  * scale;\r\n\t\t\tcanvas.height = height * scale;\r\n\t\t\tcanvas.style.transform = `scale(${1 / scale}, ${1 / scale})`;\r\n\t\t});\r\n\r\n\t\tthis.update = this.update.bind(this);\r\n\t\tGame.Render.app.ticker.add(this.update);\r\n\t}\r\n\tupdate() {\r\n\t\tlet { ctx, canvas, enabled, Game } = this;\r\n\t\tconst { Render } = Game;\r\n\t\tconst { camera, pixelRatio } = Render;\r\n\t\tlet canvWidth = canvas.width;\r\n\t\tlet canvHeight = canvas.height;\r\n\t\t\r\n\t\tconst { position:cameraPosition } = camera;\r\n\t\tconst scale = camera.scale * pixelRatio;\r\n\t\tlet translation = new vec({ x: -cameraPosition.x * scale + canvWidth/2, y: -cameraPosition.y * scale + canvHeight/2 });\r\n\r\n\t\tctx.clearRect(0, 0, canvWidth, canvHeight);\r\n\t\tctx.save();\r\n\t\tctx.translate(translation.x, translation.y);\r\n\t\tctx.scale(scale, scale);\r\n\r\n\t\tfor (let debugType in enabled) {\r\n\t\t\tif (enabled[debugType] && typeof this[debugType] === \"function\") {\r\n\t\t\t\tthis[debugType]();\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tctx.restore();\r\n\t}\r\n\r\n\t\r\n\tvertices() {\r\n\t\tconst { Game, ctx } = this;\r\n\t\tconst { camera, pixelRatio } = Game.Render;\r\n\t\tconst scale = camera.scale * pixelRatio;\r\n\r\n\t\tfunction renderVertices(vertices) {\r\n\t\t\tctx.moveTo(vertices[0].x, vertices[0].y);\r\n\r\n\t\t\tfor (let j = 0; j < vertices.length; j++) {\r\n\t\t\t\tif (j > 0) {\r\n\t\t\t\t\tlet vertice = vertices[j];\r\n\t\t\t\t\tctx.lineTo(vertice.x, vertice.y);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tctx.closePath();\r\n\t\t}\r\n\r\n\t\tctx.beginPath();\r\n\t\tlet allBodies = Game.World.bodies;\r\n\t\tfor (let body of allBodies) {\r\n\t\t\trenderVertices(body.vertices);\r\n\t\t}\r\n\t\tctx.lineWidth = 2 / scale;\r\n\t\tctx.strokeStyle = \"#FF832A\";\r\n\t\tctx.stroke();\r\n\t}\r\n\tcollisions() {\r\n\t\tconst { ctx, Game } = this;\r\n\t\tconst { globalPoints, globalVectors } = Game.World;\r\n\t\t\r\n\t\tif (globalPoints.length > 0) { // Render globalPoints\r\n\t\t\tctx.beginPath();\r\n\t\t\tfor (let i = 0; i < globalPoints.length; i++) {\r\n\t\t\t\tlet point = globalPoints[i];\r\n\t\t\t\tctx.moveTo(point.x, point.y);\r\n\t\t\t\tctx.arc(point.x, point.y, 2 / camera.scale, 0, Math.PI*2);\r\n\t\t\t\tctx.fillStyle = \"#e8e8e8\";\r\n\t\t\t}\r\n\t\t\tctx.fill();\r\n\t\t}\r\n\t\tif (globalVectors.length > 0) { // Render globalVectors\r\n\t\t\tctx.beginPath();\r\n\t\t\tfor (let i = 0; i < globalVectors.length; i++) {\r\n\t\t\t\tlet point = globalVectors[i].position;\r\n\t\t\t\tlet vector = globalVectors[i].vector;\r\n\t\t\t\tctx.moveTo(point.x, point.y);\r\n\t\t\t\tctx.lineTo(point.x + vector.x * 10 / camera.scale, point.y + vector.y * 10 / camera.scale);\r\n\t\t\t\tctx.strokeStyle = \"#FFAB2E\";\r\n\t\t\t\tctx.lineWidth = 3 / camera.scale;\r\n\t\t\t}\r\n\t\t\tctx.stroke();\r\n\t\t}\r\n\t}\r\n\tcenters() {\r\n\t\tconst { ctx, Game } = this;\r\n\t\tconst { camera } = Game.Render;\r\n\t\tctx.fillStyle = \"#FF832A\";\r\n\t\tlet allBodies = Game.World.bodies;\r\n\t\tctx.beginPath();\r\n\t\tfor (let body of allBodies) {\r\n\t\t\tif (body.children.size === 0 || true) {\r\n\t\t\t\tctx.moveTo(body.position.x, body.position.y);\r\n\t\t\t\tctx.arc(body.position.x, body.position.y, 2 / camera.scale, 0, Math.PI*2);\r\n\t\t\t}\r\n\t\t}\r\n\t\tctx.fill();\r\n\t}\r\n\tboundingBox() {\r\n\t\tconst { ctx, Game } = this;\r\n\t\tconst { World, Render } = Game;\r\n\t\tconst { camera } = Render;\r\n\t\tlet allBodies = World.bodies;\r\n\t\tlet allConstraints = World.constraints;\r\n\r\n\t\tctx.strokeStyle = \"#66666680\";\r\n\t\tctx.lineWidth = 1 / camera.scale;\r\n\r\n\t\tfor (let body of allBodies) {\r\n\t\t\tif (!body.children || body.children.size === 0) {\r\n\t\t\t\tlet bounds = body.bounds;\r\n\t\t\t\tlet width  = bounds.max.x - bounds.min.x;\r\n\t\t\t\tlet height = bounds.max.y - bounds.min.y;\r\n\r\n\t\t\t\tctx.beginPath();\r\n\t\t\t\tctx.strokeRect(bounds.min.x, bounds.min.y, width, height);\r\n\t\t\t}\r\n\t\t}\r\n\t\tctx.strokeStyle = \"#66666630\";\r\n\t\tfor (let constraint of allConstraints) {\r\n\t\t\tlet bounds = constraint.bounds;\r\n\t\t\tlet width  = bounds.max.x - bounds.min.x;\r\n\t\t\tlet height = bounds.max.y - bounds.min.y;\r\n\r\n\t\t\tctx.beginPath();\r\n\t\t\tctx.strokeRect(bounds.min.x, bounds.min.y, width, height);\r\n\t\t}\r\n\t}\r\n\tbroadphase(tree = this.Game.World.dynamicGrid) {\r\n\t\tconst { ctx, Game } = this;\r\n\t\tconst { camera } = Game.Render;\r\n\t\tlet size = tree.gridSize;\r\n\r\n\t\tctx.lineWidth = 0.4 / camera.scale;\r\n\t\tctx.strokeStyle = \"#D0A356\";\r\n\t\tctx.fillStyle = \"#947849\";\r\n\t\t\r\n\t\tObject.keys(tree.grid).forEach(n => {\r\n\t\t\tlet node = tree.grid[n];\r\n\t\t\tlet pos = tree.unpair(n).mult(size);\r\n\t\t\tctx.strokeRect(pos.x, pos.y, size, size);\r\n\t\t\tctx.globalAlpha = 0.003 * node.length;\r\n\t\t\tctx.fillRect(pos.x, pos.y, size, size);\r\n\t\t\tctx.globalAlpha = 1;\r\n\t\t});\r\n\t}\r\n}\r\n","const RenderMethods = require(\"../render/RenderMethods\");\r\n\r\nmodule.exports = class PerformanceRender {\r\n\tenabled = false;\r\n\tcanvas = null;\r\n\tctx = null;\r\n\tposition = new vec(20, 20);\r\n\tconstructor(Performance, Render) {\r\n\t\tthis.Performance = Performance;\r\n\r\n\t\t// Create canvas\r\n\t\tconst width  = this.width  = 100;\r\n\t\tconst height = this.height = 50;\r\n\t\tlet scale = this.scale = devicePixelRatio ?? 1;\r\n\t\tlet canvas = this.canvas = document.createElement(\"canvas\");\r\n\t\tthis.ctx = canvas.getContext(\"2d\");\r\n\t\tcanvas.style.position = \"absolute\";\r\n\t\tcanvas.style.zIndex = 2;\r\n\t\tcanvas.style.top =  \"20px\";\r\n\t\tcanvas.style.right = \"0px\";\r\n\t\tcanvas.style.left = \"unset\";\r\n\t\tcanvas.width =  scale * width;\r\n\t\tcanvas.height = scale * height;\r\n\t\tcanvas.style.background = \"transparent\";\r\n\t\tcanvas.style.pointerEvents = \"none\";\r\n\t\tcanvas.style.transformOrigin = \"top left\";\r\n\t\tcanvas.style.transform = `scale(${1 / scale}, ${1 / scale})`;\r\n\t\tdocument.body.appendChild(canvas);\r\n\r\n\t\t// Set up rendering\r\n\t\tthis.update = this.update.bind(this);\r\n\t\tRender.app.ticker.add(this.update);\r\n\t}\r\n\tupdate() {\r\n\t\tlet { canvas, ctx, enabled, Performance, scale, width, height } = this;\r\n\t\tlet { history } = Performance;\r\n\r\n\t\tctx.clearRect(0, 0, canvas.width, canvas.height);\r\n\t\tif (enabled) {\r\n\t\t\tctx.save();\r\n\t\t\tctx.scale(scale, scale);\r\n\r\n\t\t\t// background\r\n\t\t\tctx.beginPath();\r\n\t\t\tRenderMethods.roundedRect(width, height, new vec(width/2, height/2), 5, ctx);\r\n\t\t\tctx.fillStyle = \"#0D0D0De6\";\r\n\t\t\tctx.fill();\r\n\r\n\r\n\t\t\t// get fps stats\r\n\t\t\tlet maxFps = 0;\r\n\t\t\tlet minFps = Infinity;\r\n\t\t\tlet avgFps = (() => {\r\n\t\t\t\tlet v = 0;\r\n\t\t\t\tfor (let i = 0; i < history.fps.length; i++) {\r\n\t\t\t\t\tlet cur = history.fps[i];\r\n\t\t\t\t\tv += cur;\r\n\t\t\t\t\tmaxFps = Math.max(maxFps, cur);\r\n\t\t\t\t\tminFps = Math.min(minFps, cur);\r\n\t\t\t\t}\r\n\t\t\t\treturn v / history.fps.length;\r\n\t\t\t})();\r\n\t\t\tlet nearAvgFps = (() => {\r\n\t\t\t\tlet v = 0;\r\n\t\t\t\tlet n = Math.min(history.fps.length, 20);\r\n\t\t\t\tfor (let i = 0; i < n; i++) {\r\n\t\t\t\t\tlet cur = history.fps[i];\r\n\t\t\t\t\tv += cur;\r\n\t\t\t\t}\r\n\t\t\t\treturn v / n;\r\n\t\t\t})();\r\n\r\n\t\t\t// fps text\r\n\t\t\tctx.beginPath();\r\n\t\t\tctx.fillStyle = \"white\";\r\n\t\t\tctx.textAlign = \"right\";\r\n\t\t\tctx.font = `400 ${12}px Arial`;\r\n\t\t\tctx.fillText(`${Math.round(nearAvgFps)} fps`, width - 12, 5 + 12);\r\n\r\n\t\t\t\r\n\t\t\tif (history.fps.length > 10) { // fps graph\r\n\t\t\t\tlet range = 100;\r\n\t\t\t\tlet fpsRanges = {\r\n\t\t\t\t\tmin: Math.max(0, Math.min(minFps, avgFps - range)),\r\n\t\t\t\t\tmax: Math.max(maxFps, avgFps + range, 60),\r\n\t\t\t\t}\r\n\t\t\t\tconst fpsRange = fpsRanges.max - fpsRanges.min;\r\n\t\t\t\tlet bounds = {\r\n\t\t\t\t\tmin: new vec(10, 18),\r\n\t\t\t\t\tmax: new vec(width - 10, height - 4),\r\n\t\t\t\t};\r\n\r\n\t\t\t\tctx.beginPath();\r\n\t\t\t\tfunction getPosition(point, i) {\r\n\t\t\t\t\tlet x = bounds.max.x - (i / history.fps.length) * (bounds.max.x - bounds.min.x);\r\n\t\t\t\t\tlet y = bounds.max.y - ((point - fpsRanges.min) / fpsRange) * (bounds.max.y - bounds.min.y);\r\n\t\t\t\t\treturn [x, y];\r\n\t\t\t\t}\r\n\t\t\t\tctx.moveTo(...getPosition(history.fps[0], 0))\r\n\t\t\t\tfor (let i = 1; i < history.fps.length; i++) {\r\n\t\t\t\t\tctx.lineTo(...getPosition(history.fps[i], i));\r\n\t\t\t\t}\r\n\t\t\t\tctx.lineWidth = 1;\r\n\t\t\t\tctx.lineJoin = \"bevel\";\r\n\t\t\t\tctx.strokeStyle = \"#9C9C9C\";\r\n\t\t\t\tctx.stroke();\r\n\t\t\t}\r\n\r\n\t\t\t// colored rect\r\n\t\t\tctx.beginPath();\r\n\t\t\tlet colors = [[0.75, \"#3FF151\"], [0.5, \"#F5ED32\"], [0.25, \"#F89A2C\"], [0, \"#F74D4D\"]];\r\n\t\t\tlet boundMax = 60;\r\n\t\t\tctx.fillStyle = \"#808080\";\r\n\t\t\tfor (let color of colors) {\r\n\t\t\t\tif (avgFps >= color[0] * boundMax) {\r\n\t\t\t\t\tctx.fillStyle = color[1];\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tRenderMethods.roundedRect(6, 6, new vec(15, 13), 2, ctx);\r\n\t\t\tctx.fill();\r\n\t\t\t\r\n\t\t\t\r\n\t\t\tctx.restore();\r\n\t\t}\r\n\t}\r\n}\r\n","const Node = require(\"../node/Node.js\");\r\nconst vec = require(\"../geometry/vec.js\");\r\nconst Common = require(\"../core/Common.js\");\r\n\r\nmodule.exports = class PolygonRender extends Node {\r\n\tstatic defaultOptions = {\r\n\t\tcontainer: null, // {PIXI Container}\r\n\t\tlayer: 0, // {Number}\r\n\t\tposition: new vec(0, 0), // {vec}\r\n\t\tangle: 0, // {Number} [0, 2PI]\r\n\t\ttype: \"polygon\", // \"polygon\" | \"rectangle\" | \"circle\"\r\n\t\tvertices: [],\r\n\r\n\t\tvisible: true,\r\n\t\talpha: 1,\r\n\t\tbackground: \"transparent\",\r\n\t\tborder: \"transparent\",\r\n\t\tborderWidth: 3,\r\n\t\tborderOffset: 0.5,\r\n\t\tlineCap: \"butt\",\r\n\t\tlineJoin: \"miter\",\r\n\t\t\r\n\t\t// type: \"rectangle\" only options\r\n\t\twidth: 100,\r\n\t\theigth: 100,\r\n\t\tround: 0,\r\n\r\n\t\t// type: \"circle\" only options\r\n\t\tradius: 50,\r\n\t}\r\n\tstatic all = new Set();\r\n\r\n\tconstructor(options = {}) {\r\n\t\tsuper();\r\n\t\tlet defaults = { ...PolygonRender.defaultOptions };\r\n\t\tCommon.merge(defaults, options, 1);\r\n\t\toptions = defaults;\r\n\t\tCommon.merge(this, options, 1);\r\n\r\n\t\tthis.create();\r\n\t}\r\n\tcreate() {\r\n\t\tlet graphic = this.graphic = new PIXI.Graphics();\r\n\t\tlet { position, angle, type, vertices } = this;\r\n\t\tlet { layer, alpha, background, border, borderWidth, lineCap, lineJoin, borderOffset, round } = this;\r\n\t\tlet { parseColor } = Common;\r\n\t\t\r\n\t\tbackground = parseColor(background);\r\n\t\tif (background[1] > 0) graphic.beginFill(...background);\r\n\r\n\t\tborder = parseColor(border);\r\n\t\tif (border[1] > 0) {\r\n\t\t\tgraphic.lineStyle({\r\n\t\t\t\twidth: borderWidth,\r\n\t\t\t\tcolor: border[0],\r\n\t\t\t\talpha: border[1],\r\n\t\t\t\tcap: lineCap,\r\n\t\t\t\tjoin: lineJoin,\r\n\t\t\t\talignment: borderOffset,\r\n\t\t\t});\r\n\t\t}\r\n\r\n\t\tif (type === \"rectangle\") {\r\n\t\t\tlet { width, height } = this;\r\n\t\t\t\r\n\t\t\tif (round > 0) {\r\n\t\t\t\tgraphic.drawRoundedRect(-width/2, -height/2, width, height, round);\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tgraphic.drawRect(-width/2, -height/2, width, height);\r\n\t\t\t}\r\n\t\t}\r\n\t\telse if (type === \"circle\") {\r\n\t\t\tlet { radius } = this;\r\n\t\t\tgraphic.drawCircle(0, 0, radius);\r\n\t\t}\r\n\t\telse { // manually draw vertices\r\n\t\t\tlet center = Common.getCenterOfMass(vertices);\r\n\t\t\tgraphic.drawPolygon(vertices.map(vertice => vertice.sub(center)));\r\n\t\t\t// graphic.drawPolygon(vertices);\r\n\t\t}\r\n\t\tif (border[1] > 0) graphic.closePath();\r\n\t\tif (background[1] > 0) graphic.endFill();\r\n\t\tgraphic.zIndex = layer;\r\n\r\n\t\t// Translate to position\r\n\t\tlet translateDelta = new vec(position);\r\n\t\tthis.position = new vec(0, 0);\r\n\t\tthis.translate(translateDelta);\r\n\r\n\t\t// Rotate to angle\r\n\t\tthis.angle = 0;\r\n\t\tthis.translateAngle(angle);\r\n\r\n\t\t// Set alpha\r\n\t\tthis.setAlpha(alpha);\r\n\r\n\t\t// Trigger events\r\n\t\tthis.trigger(\"load\");\r\n\t}\r\n\r\n\t/**\r\n\t * Sets the render layer (z index)\r\n\t * @param {Number} layer - The render layer (z index) for the render\r\n\t */\r\n\tsetLayer(layer) {\r\n\t\tthis.layer = layer;\r\n\t\tthis.graphic.zIndex = layer;\r\n\t}\r\n\r\n\t/**\r\n\t * Sets the render's alpha\r\n\t * @param {Number} alpha - The opacity, between 0 and 1 inclusive\r\n\t */\r\n\tsetAlpha(alpha) {\r\n\t\tthis.alpha = alpha;\r\n\t\tthis.graphic.alpha = alpha;\r\n\t}\r\n\r\n\t/**\r\n\t * Changes if the render is visible\r\n\t * @param {Boolean} visible - If the render is visible\r\n\t */\r\n\tsetVisible(visible) {\r\n\t\tthis.visible = visible;\r\n\t\tthis.graphic.visible = visible;\r\n\t}\r\n\r\n\t/**\r\n\t * Shifts the render's position by `delta`\r\n\t * @param {vec} delta - Position render is shifted\r\n\t */\r\n\ttranslate(delta) {\r\n\t\tsuper.translate(delta);\r\n\r\n\t\tlet { graphic } = this;\r\n\t\tgraphic.position.x += delta.x;\r\n\t\tgraphic.position.y += delta.y;\r\n\t}\r\n\r\n\t/**\r\n\t * Rotates the render relative to current angle\r\n\t * @param {Number} angle - Amount to rotate render, in radians\r\n\t */\r\n\ttranslateAngle(angle) {\r\n\t\tlet { graphic } = this;\r\n\t\tthis.angle += angle;\r\n\t\tgraphic.rotation += angle;\r\n\t}\r\n\r\n\t/**\r\n\t * Adds the render object to the world\r\n\t */\r\n\tadd() {\r\n\t\tsuper.add();\r\n\t\tPolygonRender.all.add(this);\r\n\t\tthis.container.addChild(this.graphic);\r\n\t}\r\n\t/**\r\n\t * Removes the render object from the world\r\n\t */\r\n\tdelete() {\r\n\t\tsuper.delete();\r\n\t\tPolygonRender.all.delete(this);\r\n\t\tthis.container.removeChild(this.graphic);\r\n\t}\r\n\t\r\n\t/**\r\n\t * Destroys the render object. Use when you know the render will no longer be used\r\n\t */\r\n\tdestroy() {\r\n\t\tthis.graphic.destroy();\r\n\t}\r\n\r\n\t#events = {\r\n\t\tdelete: [],\r\n\t\tadd: [],\r\n\t\tload: [],\r\n\t}\r\n}\r\n","const Camera = require(\"../render/Camera.js\");\r\nconst Common = require(\"../core/Common.js\");\r\nconst vec = require(\"../geometry/vec.js\");\r\n\r\nmodule.exports = class Render {\r\n\tstatic defaultOptions = {\r\n\t\tbackground: false,\r\n\t\tpixelRatio: window.devicePixelRatio ?? 1,\r\n\t\tySort: false,\r\n\t\tresizeTo: window,\r\n\t\tantialias: true,\r\n\t\tgetBoundSize: function(width, height) {\r\n\t\t\treturn Math.sqrt(width ** 2 + height ** 2) || 1;\r\n\t\t}\r\n\t}\r\n\tapp = null;\r\n\tcamera = null;\r\n\tpixelRatio = 1;\r\n\tnodes = new Set();\r\n\tconstructor(options = {}) {\r\n\t\tlet defaults = { ...Render.defaultOptions };\r\n\t\tlet resizeTo = options.resizeTo ?? defaults.resizeTo;\r\n\t\tdelete options.resizeTo;\r\n\t\tCommon.merge(defaults, options, 1);\r\n\t\toptions = defaults;\r\n\r\n\t\t// Create camera\r\n\t\tthis.camera = new Camera();\r\n\r\n\t\tlet { background, ySort, pixelRatio, antialias } = options;\r\n\r\n\t\t// Test if PIXI is loaded\r\n\t\ttry { PIXI.settings; }\r\n\t\tcatch(err) {\r\n\t\t\tthrow new Error(\"PIXI is not defined\\nHelp: try loading pixi.js before creating a ter app\");\r\n\t\t}\r\n\t\t\r\n\t\t// Set basic settings\r\n\t\tlet scale = PIXI.settings.RESOLUTION = PIXI.settings.FILTER_RESOLUTION = this.pixelRatio = pixelRatio;\r\n\t\tPIXI.Container.defaultSortableChildren = true\r\n\t\t\r\n\t\t// Create PIXI app\r\n\t\tlet app = this.app = new PIXI.Application({\r\n\t\t\tbackground: background ?? 0x0,\r\n\t\t\tbackgroundAlpha: (background && background != \"transparent\") ? 1 : 0,\r\n\t\t\tresizeTo: resizeTo ?? window,\r\n\t\t\tantialias: antialias ?? true,\r\n\t\t});\r\n\t\tdocument.body.appendChild(app.view);\r\n\t\tapp.ticker.add(this.update.bind(this)); // Start rendedr\r\n\t\tapp.stage.filters = []; // Makes working with filters easier\r\n\t\tapp.stage.sortableChildren = true; // Important to make sure render layers work\r\n\r\n\t\t// Set up pixel ratio scaling\r\n\t\tlet view = app.view;\r\n\t\tview.style.transformOrigin = \"top left\";\r\n\t\tview.style.transform = `scale(${1 / scale}, ${1 / scale})`;\r\n\r\n\t\tthis.setSize(app.screen.width, app.screen.height);\r\n\t\tapp.renderer.on(\"resize\", this.setSize.bind(this));\r\n\r\n\t\t// Set up y sorting if enabled\r\n\t\tif (ySort) {\r\n\t\t\tapp.stage.on(\"sort\", function beforeSort(sprite) {\r\n\t\t\t\tsprite.zOrder = sprite.y;\r\n\t\t\t});\r\n\t\t}\r\n\t}\r\n\tsetSize(width, height) {\r\n\t\tlet pixelRatio = this.pixelRatio;\r\n\t\tthis.camera.boundSize = this.getBoundSize(width, height) * pixelRatio;\r\n\t}\r\n\tsetPixelRatio(pixelRatio) {\r\n\t\tthis.pixelRatio = pixelRatio;\r\n\t\tthis.setSize(this.app.screen.width, this.app.screen.height); // update bounds with new pixel ratio\r\n\t}\r\n\r\n\t/**\r\n\t * Adds all `children` to this Render\r\n\t * @param {...Renderable} children - The children to be added\r\n\t */\r\n\taddChild(...children) {\r\n\t\tfor (let child of children) {\r\n\t\t\tthis.nodes.add(child);\r\n\t\t}\r\n\t}\r\n\t/**\r\n\t * Removes all `children` from this Render\r\n\t * @param {...Renderable} children - The children to be removed\r\n\t */\r\n\tremoveChild(...children) {\r\n\t\tfor (let child of children) {\r\n\t\t\tthis.nodes.delete(child);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Updates renderer, its camera, and all render nodes attached to it. Triggers `beforeUpdate` and `afterUpdate` events on this Render. Also triggers `render` on nodes\r\n\t */\r\n\tupdate() {\r\n\t\tthis.trigger(\"beforeUpdate\");\r\n\r\n\t\tlet { app, camera } = this;\r\n\t\tlet { stage } = app;\r\n\t\tlet { position: cameraPosition, translation, fov, boundSize } = camera;\r\n\t\t\r\n\t\tlet screenSize = new vec(app.screen.width, app.screen.height);\r\n\t\ttranslation.set({ x: -cameraPosition.x * boundSize/fov + screenSize.x/2, y: -cameraPosition.y * boundSize/fov + screenSize.y/2 });\r\n\t\tcamera.scale = boundSize / fov;\r\n\r\n\t\tfor (let node of this.nodes) {\r\n\t\t\tif (node.render.graphic) {\r\n\t\t\t\tnode.render.graphic.update();\r\n\t\t\t\tnode.trigger(\"render\");\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\t// update camera position\r\n\t\tstage.x = translation.x;\r\n\t\tstage.y = translation.y;\r\n\t\tstage.scale.x = camera.scale;\r\n\t\tstage.scale.y = camera.scale;\r\n\r\n\t\tthis.trigger(\"afterUpdate\");\r\n\t}\r\n\r\n\t// - Events\r\n\t#events = {\r\n\t\tbeforeUpdate: [],\r\n\t\tafterUpdate: [],\r\n\t}\r\n\ton(event, callback) {\r\n\t\tif (this.#events[event]) {\r\n\t\t\tthis.#events[event].push(callback);\r\n\t\t}\r\n\t\telse {\r\n\t\t\tconsole.warn(event + \" is not a valid event\");\r\n\t\t}\r\n\t}\r\n\toff(event, callback) {\r\n\t\tevent = this.#events[event];\r\n\t\tif (event.includes(callback)) {\r\n\t\t\tevent.splice(event.indexOf(callback), 1);\r\n\t\t}\r\n\t}\r\n\ttrigger(event) {\r\n\t\t// Trigger each event\r\n\t\tif (this.#events[event]) {\r\n\t\t\tthis.#events[event].forEach(callback => {\r\n\t\t\t\tcallback();\r\n\t\t\t});\r\n\t\t}\r\n\t}\r\n}\r\n","let RenderMethods = module.exports = {\r\n\t// ~ Point transformations\r\n\tscreenPtToGame: function(point, Render) {\r\n\t\tconst { camera, pixelRatio } = Render;\r\n\t\tconst { scale, translation } = camera;\r\n\t\treturn new vec((point.x * pixelRatio - translation.x) / scale, (point.y * pixelRatio - translation.y) / scale);\r\n\t},\r\n\tgamePtToScreen: function(point, Render) {\r\n\t\tconst { camera, pixelRatio } = Render;\r\n\t\tconst { scale, translation } = camera;\r\n\t\treturn new vec((point.x * scale + translation.x) / pixelRatio, (point.y * scale + translation.y) / pixelRatio);\r\n\t},\r\n\troundedPolygon: function(vertices, round, graphic) {\r\n\t\tif (vertices.length < 3) {\r\n\t\t\tconsole.warn(\"RenderMethods.roundedPolygon needs at least 3 vertices\", vertices);\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tfunction getPoints(i) {\r\n\t\t\tlet curPt = vertices[i];\r\n\t\t\tlet lastPt = vertices[(vertices.length + i - 1) % vertices.length];\r\n\t\t\tlet nextPt = vertices[(i + 1) % vertices.length];\r\n\r\n\t\t\tlet lastDiff = lastPt.sub(curPt);\r\n\t\t\tlet nextDiff = curPt.sub(nextPt);\r\n\t\t\tlet lastLen = lastDiff.length;\r\n\t\t\tlet nextLen = nextDiff.length;\r\n\r\n\t\t\tlet curRound = Math.min(lastLen / 2, nextLen / 2, round);\r\n\t\t\tlet cp = curPt;\r\n\t\t\tlet pt1 = cp.add(lastDiff.normalize().mult(curRound));\r\n\t\t\tlet pt2 = cp.sub(nextDiff.normalize().mult(curRound));\r\n\r\n\t\t\treturn [pt1, cp, pt2];\r\n\t\t}\r\n\r\n\t\tlet start = getPoints(0);\r\n\t\tgraphic.moveTo(start[0].x, start[0].y);\r\n\t\tgraphic.quadraticCurveTo(start[1].x, start[1].y, start[2].x, start[2].y);\r\n\r\n\t\tfor (let i = 1; i < vertices.length; i++) {\r\n\t\t\tlet cur = getPoints(i);\r\n\t\t\tgraphic.lineTo(cur[0].x, cur[0].y);\r\n\t\t\tgraphic.quadraticCurveTo(cur[1].x, cur[1].y, cur[2].x, cur[2].y);\r\n\t\t}\r\n\r\n\t\tgraphic.lineTo(start[0].x, start[0].y);\r\n\t},\r\n\troundedPolygonCtx: function(vertices, round, ctx) {\r\n\t\tif (vertices.length < 3) {\r\n\t\t\tconsole.warn(\"RenderMethods.roundedPolygon needs at least 3 vertices\", vertices);\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tfunction getPoints(i) {\r\n\t\t\tlet curPt = vertices[i];\r\n\t\t\tlet lastPt = vertices[(vertices.length + i - 1) % vertices.length];\r\n\t\t\tlet nextPt = vertices[(i + 1) % vertices.length];\r\n\r\n\t\t\tlet lastDiff = lastPt.sub(curPt);\r\n\t\t\tlet nextDiff = curPt.sub(nextPt);\r\n\t\t\tlet lastLen = lastDiff.length;\r\n\t\t\tlet nextLen = nextDiff.length;\r\n\r\n\t\t\tlet curRound = Math.min(lastLen / 2, nextLen / 2, round);\r\n\t\t\tlet cp = curPt;\r\n\t\t\tlet pt1 = cp.add(lastDiff.normalize().mult(curRound));\r\n\t\t\tlet pt2 = cp.sub(nextDiff.normalize().mult(curRound));\r\n\r\n\t\t\treturn [pt1, cp, pt2];\r\n\t\t}\r\n\r\n\t\tlet start = getPoints(0)\r\n\t\tctx.moveTo(start[0].x, start[0].y);\r\n\t\tctx.quadraticCurveTo(start[1].x, start[1].y, start[2].x, start[2].y);\r\n\r\n\t\tfor (let i = 1; i < vertices.length; i++) {\r\n\t\t\tlet cur = getPoints(i);\r\n\t\t\tctx.lineTo(cur[0].x, cur[0].y);\r\n\t\t\tctx.quadraticCurveTo(cur[1].x, cur[1].y, cur[2].x, cur[2].y);\r\n\t\t}\r\n\r\n\t\tctx.closePath();\r\n\t},\r\n\troundedRect: function(width, height, position, round, ctx) {\r\n\t\tRenderMethods.roundedPolygonCtx([\r\n\t\t\tnew vec(-width/2, -height/2).add2(position),\r\n\t\t\tnew vec( width/2, -height/2).add2(position),\r\n\t\t\tnew vec( width/2,  height/2).add2(position),\r\n\t\t\tnew vec(-width/2,  height/2).add2(position),\r\n\t\t], round, ctx);\r\n\t},\r\n\tarrow: function(position, direction, size = 10, ctx) {\r\n\t\tlet endPos = new vec(position.x + direction.x, position.y + direction.y);\r\n\t\tlet sideA = direction.rotate(Math.PI * 3/4).normalize2().mult(size);\r\n\t\tlet sideB = sideA.reflect(direction.normalize());\r\n\r\n\t\tctx.moveTo(position.x, position.y);\r\n\t\tctx.lineTo(endPos.x, endPos.y);\r\n\t\tctx.lineTo(endPos.x + sideA.x, endPos.y + sideA.y);\r\n\t\tctx.moveTo(endPos.x, endPos.y);\r\n\t\tctx.lineTo(endPos.x + sideB.x, endPos.y + sideB.y);\r\n\t},\r\n}\r\n","let Render = module.exports;\r\n\r\nRender.Polygon = require(\"../render/PolygonRender\");\r\nRender.Sprite = require(\"../render/Sprite\");\r\n","const Common = require(\"../core/Common.js\");\r\nconst Node = require(\"../node/Node.js\");\r\nconst vec = require(\"../geometry/vec.js\");\r\n\r\n// todo: load all sprites when game is loaded\r\n// todo: properly delete sprites when bodies no longer used\r\n\r\nmodule.exports = class Sprite extends Node {\r\n\tstatic imageDir = \"./img/\";\r\n\tstatic defaultOptions = {\r\n\t\tcontainer: null, // {PIXI Container}\r\n\t\tlayer: 0, // {Number}\r\n\t\tposition: new vec(0, 0), // {vec}\r\n\t\tangle: 0, // {Number} [0, 2PI]\r\n\r\n\t\tvisible: true,\r\n\t\talpha: 1,\r\n\t\tsrc: \"\",\r\n\t\t\r\n\t\tscale: new vec(1, 1),\r\n\t\twidth:  undefined,\r\n\t\theigth: undefined,\r\n\t}\r\n\tstatic all = new Set();\r\n\r\n\tloaded = false;\r\n\r\n\tconstructor(options) {\r\n\t\tsuper();\r\n\t\tlet defaults = { ...Sprite.defaultOptions };\r\n\t\tCommon.merge(defaults, options, 1);\r\n\t\toptions = defaults;\r\n\t\tCommon.merge(this, options, 1);\r\n\r\n\t\tthis.src = Sprite.imageDir + this.src;\r\n\t\tthis.position = new vec(this.position ?? { x: 0, y: 0 });\r\n\t\tthis.add = this.add.bind(this);\r\n\r\n\t\tthis.create();\r\n\t}\r\n\tcreate() {\r\n\t\tlet { width, height, layer, position, angle, src } = this;\r\n\t\tlet sprite = this.sprite = PIXI.Sprite.from(src);\r\n\t\tthis.loaded = true;\r\n\t\tsprite.anchor.set(0.5);\r\n\r\n\t\tif (width != undefined && height != undefined) {\r\n\t\t\tthis.setSize(width, height);\r\n\t\t}\r\n\r\n\t\t// Update alpha\r\n\t\tthis.setAlpha(this.alpha);\r\n\r\n\t\t// Update layer\r\n\t\tthis.setLayer(layer);\r\n\r\n\t\t// Translate to position\r\n\t\tlet translateDelta = new vec(position);\r\n\t\tthis.position.set(new vec(0, 0));\r\n\t\tthis.translate(translateDelta);\r\n\t\t\r\n\t\t// Rotate to angle\r\n\t\tthis.angle = 0;\r\n\t\tthis.translateAngle(angle);\r\n\r\n\t\t\r\n\t\tthis.trigger(\"load\");\r\n\t}\r\n\t\r\n\t/**\r\n\t * Sets the render layer (z index)\r\n\t * @param {Number} layer - The render layer (z index) for the render\r\n\t */\r\n\tsetLayer(layer) {\r\n\t\tthis.layer = layer;\r\n\t\tif (!this.loaded) return;\r\n\t\tthis.sprite.zIndex = layer;\r\n\t}\r\n\r\n\t/**\r\n\t * Sets the sprite's scale\r\n\t * @param {vec} scale - The new scale\r\n\t */\r\n\tsetScale(scale) {\r\n\t\tthis.scale.set(scale);\r\n\r\n\t\tif (!this.loaded) return;\r\n\t\tlet { sprite } = this;\r\n\t\tsprite.scale.x = this.scale.x;\r\n\t\tsprite.scale.y = this.scale.y;\r\n\t}\r\n\r\n\t/**\r\n\t * Sets the sprite's width and height\r\n\t * @param {Number} width - The new width\r\n\t * @param {Number} height - The new height\r\n\t */\r\n\tsetSize(width, height) {\r\n\t\tif (width != undefined) this.width = width;\r\n\t\tif (height != undefined) this.height = height;\r\n\r\n\t\tif (!this.loaded) return;\r\n\t\tlet { sprite } = this;\r\n\t\tsprite.width =  this.width;\r\n\t\tsprite.height = this.height;\r\n\t}\r\n\r\n\t/**\r\n\t * Sets the sprite's alpha\r\n\t * @param {Number} alpha - The opacity, between 0 and 1 inclusive\r\n\t */\r\n\tsetAlpha(alpha) {\r\n\t\tthis.alpha = alpha;\r\n\t\tif (!this.loaded) return;\r\n\t\tthis.sprite.alpha = alpha;\r\n\t}\r\n\r\n\t/**\r\n\t * Changes if the sprite is visible\r\n\t * @param {Boolean} visible - If the sprite is visible\r\n\t */\r\n\tsetVisible(visible) {\r\n\t\tthis.visible = visible;\r\n\t\tif (!this.loaded) return;\r\n\t\tthis.sprite.visible = visible;\r\n\t}\r\n\r\n\t/**\r\n\t * Shifts the sprite's position by `delta`\r\n\t * @param {vec} delta - Amount sprite is shifted by\r\n\t */\r\n\ttranslate(delta) {\r\n\t\tsuper.translate(delta);\r\n\r\n\t\tif (!this.loaded) return;\r\n\t\tlet { sprite } = this;\r\n\t\tsprite.position.x += delta.x;\r\n\t\tsprite.position.y += delta.y;\r\n\t}\r\n\t\r\n\t/**\r\n\t * Rotates the sprite relative to current angle\r\n\t * @param {Number} angle - Amount to rotate sprite, in radians\r\n\t */\r\n\ttranslateAngle(angle) {\r\n\t\tthis.angle += angle;\r\n\r\n\t\tif (!this.loaded) return;\r\n\t\tlet { sprite } = this;\r\n\t\tsprite.rotation += angle;\r\n\t}\r\n\r\n\t/**\r\n\t * Adds the sprite to the world\r\n\t */\r\n\tadd() {\r\n\t\tif (!this.sprite && this.added) {\r\n\t\t\tthis.on(\"load\", this.add);\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tsuper.add();\r\n\t\tSprite.all.add(this);\r\n\t\tthis.container.addChild(this.sprite);\r\n\t}\r\n\t\r\n\t/**\r\n\t * Removes the sprite from the world\r\n\t */\r\n\tdelete() {\r\n\t\tsuper.delete();\r\n\t\tSprite.all.delete(this);\r\n\t\tthis.container.removeChild(this.sprite);\r\n\t\t\r\n\t\tthis.off(\"load\", this.add);\r\n\t}\r\n\t\r\n\t/**\r\n\t * Destroys the sprite. Use when you know the sprite will no longer be used\r\n\t */\r\n\tdestroy() {\r\n\t\tthis.sprite.destroy();\r\n\t}\r\n\r\n\r\n\t#events = {\r\n\t\tload: [],\r\n\t\tadd: [],\r\n\t\tdelete: [],\r\n\t}\r\n}\r\n","let ter = module.exports;\r\n\r\nter.Performance = require(\"./core/Performance\");\r\nter.Game = require(\"./core/Game\");\r\nter.Functions = require(\"./core/GameFunctions\");\r\nter.Common = require(\"./core/Common\");\r\nter.Ticker = require(\"./core/Ticker\");\r\n\r\n\r\nter.Node = require(\"./node/Node\");\r\nter.World = require(\"./node/World\");\r\n\r\nter.Engine = require(\"./physics/Engine\");\r\nter.Bodies = require(\"./bodies/Bodies\");\r\n\r\nter.Render = require(\"./render/RenderTypes\");\r\n\r\nvec = require(\"./geometry/vec\");\r\nter.Grid = require(\"./geometry/Grid\");\r\nter.Bezier = require(\"./geometry/Bezier\");\r\n\r\nter.simplexNoise = require(\"./lib/simplexNoise\");\r\nter.polyDecomp = require(\"./lib/poly-decomp\");\r\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(\"./src/ter.js\");\n"],"names":["root","factory","exports","module","define","amd","self","Bodies","isClass","RigidBody","Rectangle","createBodyFactory","Engine","type","args","vec","PolygonRender","Sprite","createVertices","width","height","constructor","position","options","super","this","addPolygonRender","container","render","vertices","added","add","addChild","addSprite","Common","clamp","x","min","max","Math","angleDiff","angle1","angle2","a","PI","b","floor","modDiff","y","m","pair","unpair","n","z","sqrt","l","pairCommon","getCenterOfMass","centroid","det","tempDet","numVertices","length","i","curVert","nextVert","add2","div2","parseColor","originalColor","color","alpha","slice","parseInt","indexOf","split","map","value","toString","padStart","join","pop","merge","objA","objB","maxDepth","Infinity","hash","WeakSet","Object","keys","forEach","option","Array","isArray","has","obj","isCtorClass","substring","undefined","prototype","isPrototypeCtorClass","lineIntersects","a1","a2","b1","b2","d","nx","ny","pt","withinX","withinY","lineIntersectsBody","body","children","child","rayNormalized","sub","normalize","rayAxes","normal","rayVertices","SAT","verticesA","verticesB","axes","axis","boundsA","boundsB","vertice","projected","dot","minVertice","getRayNearbyStaticBodies","start","end","World","grid","staticGrid","size","gridSize","bounds","floor2","bodies","Set","node","getRayNearbyDynamicBodies","dynamicGrid","raycast","minDist","minPt","minBody","minVert","len","intersection","dist","collision","distance","point","verticeIndex","raycastSimple","boundCollision","pointInBounds","arrayDelete","array","index","splice","Render","DebugRender","PerformanceRender","Ticker","Game","static","defaultOptions","defaults","createDebugRender","Performance","enabled","getVoronoiRegion","vertToNext","vertToPoint","outside","vpDotAxis","within","lastAxis","closestPointBetweenBodies","bodyA","bodyB","minDistance","verticeA","region","pointBA","mult","closestEdgeBetweenBodies","curNormal","prev","next","axisA","axisB","createGradient","startPosition","endPosition","colorStops","gradient","ctx","createLinearGradient","colorStop","addColorStop","createRadialGradient","radius","createElement","properties","elem","document","addProperties","property","Element","classes","className","classList","appendChild","gaussianRandom","mean","stdev","random","u","v","log","cos","createSeededRandom","seed","mask","m_w","m_z","setCSSVariable","varName","style","setProperty","boundedRandom","boundedRandomPoint","getMovementDirections","direction","threshold","directionNames","right","left","down","up","setMovementDirections","controls","directions","controlName","createTilingArea","areaBody","sprite","texture","PIXI","Texture","from","angle","setAngle","tiling","TilingSprite","zIndex","mainWorld","spritePos","curPosition","rotate","rotation","set","delete","removeChild","destroy","getAvgs","lastUpdate","fps","delta","frame","history","avgFps","avgDelta","engine","performance","now","update","curTime","push","shift","pauseOnFreeze","freezeThreshold","tick","bind","window","addEventListener","trigger","requestAnimationFrame","beforeTick","afterTick","on","event","callback","console","warn","off","includes","pt1","cp1","cp2","pt2","c","getLength","getAtT","t","dt","lastPt","get","getDxAtT","getDx","getDx2AtT","getDx2","beginPath","moveTo","lineTo","strokeStyle","lineWidth","camera","scale","stroke","renderDx","toObject","Grid","gridIds","id","pos","sqrtz","sqz","result1","getBounds","div","getBucketIds","ids","addBody","_Grids","removeBody","addPoint","bucketPos","removePoint","updateBody","curNodes","oldNodes","sin","vec2","sub2","mult2","pow","pow2","sign","sign2","mod","mod2","cross","avg","weight","weight2","atan2","area","manhattan","abs","abs2","reflect","v2","reflect2","rotate2","project","bound","d1","d2","project2","normalize2","normal2","ceil","ceil2","round","round2","min2","max2","clamp2","equals","toStringInt","toArray","isNaN","lineInt","l1","l2","precision","c1","c2","scalar_eq","lineSegmentsIntersect","p1","p2","q1","q2","dx","dy","da","db","s","triangleArea","isLeft","isLeftOn","isRight","isRightOn","decomp","polygon","edges","polygonGetCutEdges","polygonSlice","quickDecomp","polygonQuickDecomp","result","reflexVertices","steinerPoints","maxlevel","level","upperInt","lowerInt","p","upperDist","lowerDist","closestDist","upperIndex","lowerIndex","closestIndex","lowerPoly","upperPoly","poly","polygonIsReflex","Number","MAX_VALUE","j","polygonAt","getIntersectionPoint","sqdist","polygonAppend","polygonCanSee2","isSimple","path","removeCollinearPoints","num","collinear","removeDuplicatePoints","pi","points_eq","makeCCW","br","tmp","N","polygonReverse","tmpPoint1","tmpPoint2","thresholdAngle","ab","bc","magA","magB","acos","to","tmpLine1","tmpLine2","polygonCanSee","polygonCopy","targetPoly","polygonClear","k","tmp1","tmp2","tmpPoly","nDiags","cutEdges","polys","cutEdge","global","noise","Grad","dot2","dot3","grad3","perm","gradP","F2","G2","G3","fade","lerp","simplex2","xin","yin","i1","j1","x0","y0","x1","y1","x2","y2","gi0","gi1","gi2","t0","t1","t2","simplex3","zin","k1","i2","j2","k2","z0","z1","z2","x3","y3","z3","gi3","t3","perlin2","X","Y","n00","n01","n10","n11","perlin3","Z","n000","n001","n010","n011","n100","n101","n110","n111","w","Node","getUniqueId","setPosition","translate","positionDelta","gravity","timescale","time","constraints","pairs","globalPoints","globalVectors","canCollide","filterA","filterB","layer","layerA","maskA","layerB","maskB","hasCollisions","isStatic","parent","collisionFilter","collisionPairs","pairIds","dynamicBuckets","staticBuckets","bucketIds","curDynamicBucket","curStaticBucket","curPairs","curPair","substeps","velocityIterations","positionIterations","constraintIterations","maxShare","mutableProperties","propertyName","step","_update","collides","createPair","_preUpdate","solveVelocity","solvePositions","solveConstraints","getAllSupports","maxDist","_lastSeparations","supportsA","supportsB","_axes","normalPoint","contactBody","normalBody","minDepth","contacts","numContacts","findNormal","curVertice","nextVertice","support","_getSupport","containsPoint","vector","pairId","depth","penetration","totalContacts","tangent","cleansePair","isSensor","restitution","relVel","velocity","friction","slop","_slop","impulse","angImpulseA","angImpulseB","totalMass","mass","shareA","shareB","offsetA","offsetB","vpA","angularVelocity","vpB","relativeVelocity","normalVelocity","tangentVelocity","oAcN","oBcN","share","_inverseMass","_inverseInertia","normalImpulse","tangentImpulse","curImpulse","constraint","stiffness","angularStiffness","ignoreSlack","pointA","pointB","diff","solveImpulse","offset","offsetLen","vp1","vp2","angularImpulse","impulseDiff","impulsePtA","impulsePtB","impulseA","impulseB","updateBounds","Bezier","frictionAir","frictionAngular","roundVertices","newVertices","verticesLength","cur","prevToCur","curToNext","prevCurNormalized","curNextNormalized","prevRound","nextRound","curRound","bezier","filterType","roundQuality","_resetVertices","_updateInertia","setStatic","lastStatic","removed","setCollisions","_ignoreChildren","affectPosition","ignoreChildren","tree","translateAngle","silent","rotationPoint","vert","posOffset","setVelocity","error","Error","setAngularVelocity","applyForce","force","applyTorque","torque","_last","center","inertia","collisionStart","collisionActive","collisionEnd","beforeUpdate","duringUpdate","lastVelocity","lastAngularVelocity","numerator","denominator","last","curSign","verts","concaveVertices","parentCenter","FromVertices","minX","minY","maxX","maxY","forceCCW","mapped","sort","reverse","bestVert","bestDist","fov","translation","boundSize","canvas","collisions","boundingBox","centers","broadphase","devicePixelRatio","getContext","top","innerWidth","innerHeight","background","pointerEvents","transformOrigin","transform","app","renderer","ticker","pixelRatio","canvWidth","canvHeight","cameraPosition","clearRect","save","debugType","restore","renderVertices","closePath","allBodies","arc","fillStyle","fill","allConstraints","strokeRect","globalAlpha","fillRect","RenderMethods","roundedRect","maxFps","minFps","nearAvgFps","textAlign","font","fillText","range","fpsRanges","fpsRange","getPosition","lineJoin","colors","boundMax","visible","border","borderWidth","borderOffset","lineCap","heigth","create","graphic","Graphics","beginFill","lineStyle","cap","alignment","drawRoundedRect","drawRect","drawCircle","drawPolygon","endFill","translateDelta","setAlpha","setLayer","setVisible","all","load","Camera","ySort","resizeTo","antialias","getBoundSize","nodes","settings","err","RESOLUTION","FILTER_RESOLUTION","Container","defaultSortableChildren","Application","backgroundAlpha","view","stage","filters","sortableChildren","setSize","screen","zOrder","setPixelRatio","screenSize","afterUpdate","screenPtToGame","gamePtToScreen","roundedPolygon","getPoints","curPt","nextPt","lastDiff","nextDiff","lastLen","nextLen","cp","quadraticCurveTo","roundedPolygonCtx","arrow","endPos","sideA","sideB","Polygon","src","loaded","imageDir","anchor","setScale","ter","Functions","simplexNoise","polyDecomp","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","__webpack_modules__","call"],"sourceRoot":""}